# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:51+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Distutils Examples"
msgstr ""

msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"Ten dokument jest przechowywany wyłącznie do czasu, gdy dokumentacja "
"``setuptools`` pod adresem https://setuptools.readthedocs.io/en/latest/"
"setuptools.html niezależnie obejmie wszystkie istotne informacje, które są "
"tutaj zawarte."

msgid ""
"This chapter provides a number of basic examples to help get started with "
"distutils.  Additional information about using distutils can be found in the "
"Distutils Cookbook."
msgstr ""

msgid "`Distutils Cookbook <https://wiki.python.org/moin/Distutils/Cookbook>`_"
msgstr ""

msgid ""
"Collection of recipes showing how to achieve more control over distutils."
msgstr ""

msgid "Pure Python distribution (by module)"
msgstr ""

msgid ""
"If you're just distributing a couple of modules, especially if they don't "
"live in a particular package, you can specify them individually using the "
"``py_modules`` option in the setup script."
msgstr ""

msgid ""
"In the simplest case, you'll have two files to worry about: a setup script "
"and the single module you're distributing, :file:`foo.py` in this example::"
msgstr ""

msgid ""
"(In all diagrams in this section, *<root>* will refer to the distribution "
"root directory.)  A minimal setup script to describe this situation would "
"be::"
msgstr ""

msgid ""
"Note that the name of the distribution is specified independently with the "
"``name`` option, and there's no rule that says it has to be the same as the "
"name of the sole module in the distribution (although that's probably a good "
"convention to follow).  However, the distribution name is used to generate "
"filenames, so you should stick to letters, digits, underscores, and hyphens."
msgstr ""

msgid ""
"Since ``py_modules`` is a list, you can of course specify multiple modules, "
"eg. if you're distributing modules :mod:`foo` and :mod:`bar`, your setup "
"might look like this::"
msgstr ""

msgid "and the setup script might be  ::"
msgstr ""

msgid ""
"You can put module source files into another directory, but if you have "
"enough modules to do that, it's probably easier to specify modules by "
"package rather than listing them individually."
msgstr ""

msgid "Pure Python distribution (by package)"
msgstr ""

msgid ""
"If you have more than a couple of modules to distribute, especially if they "
"are in multiple packages, it's probably easier to specify whole packages "
"rather than individual modules.  This works even if your modules are not in "
"a package; you can just tell the Distutils to process modules from the root "
"package, and that works the same as any other package (except that you don't "
"have to have an :file:`__init__.py` file)."
msgstr ""

msgid "The setup script from the last example could also be written as  ::"
msgstr ""

msgid "(The empty string stands for the root package.)"
msgstr ""

msgid ""
"If those two files are moved into a subdirectory, but remain in the root "
"package, e.g.::"
msgstr ""

msgid ""
"then you would still specify the root package, but you have to tell the "
"Distutils where source files in the root package live::"
msgstr ""

msgid ""
"More typically, though, you will want to distribute multiple modules in the "
"same package (or in sub-packages).  For example, if the :mod:`foo`  and :mod:"
"`bar` modules belong in package :mod:`foobar`, one way to layout your source "
"tree is ::"
msgstr ""

msgid ""
"This is in fact the default layout expected by the Distutils, and the one "
"that requires the least work to describe in your setup script::"
msgstr ""

msgid ""
"If you want to put modules in directories not named for their package, then "
"you need to use the ``package_dir`` option again.  For example, if the :file:"
"`src` directory holds modules in the :mod:`foobar` package::"
msgstr ""

msgid "an appropriate setup script would be  ::"
msgstr ""

msgid ""
"Or, you might put modules from your main package right in the distribution "
"root::"
msgstr ""

msgid "in which case your setup script would be  ::"
msgstr ""

msgid "(The empty string also stands for the current directory.)"
msgstr ""

msgid ""
"If you have sub-packages, they must be explicitly listed in ``packages``, "
"but any entries in ``package_dir`` automatically extend to sub-packages. (In "
"other words, the Distutils does *not* scan your source tree, trying to "
"figure out which directories correspond to Python packages by looking for :"
"file:`__init__.py` files.)  Thus, if the default layout grows a sub-package::"
msgstr ""

msgid "then the corresponding setup script would be  ::"
msgstr ""

msgid "Single extension module"
msgstr ""

msgid ""
"Extension modules are specified using the ``ext_modules`` option. "
"``package_dir`` has no effect on where extension source files are found; it "
"only affects the source for pure Python modules.  The simplest  case, a "
"single extension module in a single C source file, is::"
msgstr ""

msgid ""
"If the :mod:`foo` extension belongs in the root package, the setup script "
"for this could be  ::"
msgstr ""

msgid "If the extension actually belongs in a package, say :mod:`foopkg`, then"
msgstr ""

msgid ""
"With exactly the same source tree layout, this extension can be put in the :"
"mod:`foopkg` package simply by changing the name of the extension::"
msgstr ""

msgid "Checking a package"
msgstr ""

msgid ""
"The ``check`` command allows you to verify if your package meta-data meet "
"the minimum requirements to build a distribution."
msgstr ""

msgid ""
"To run it, just call it using your :file:`setup.py` script. If something is "
"missing, ``check`` will display a warning."
msgstr ""

msgid "Let's take an example with a simple script::"
msgstr ""

msgid "Running the ``check`` command will display some warnings:"
msgstr ""

msgid ""
"If you use the reStructuredText syntax in the ``long_description`` field and "
"`docutils`_  is installed you can check if the syntax is fine with the "
"``check`` command, using the ``restructuredtext`` option."
msgstr ""

msgid "For example, if the :file:`setup.py` script is changed like this::"
msgstr ""

msgid ""
"Where the long description is broken, ``check`` will be able to detect it by "
"using the :mod:`docutils` parser:"
msgstr ""

msgid "Reading the metadata"
msgstr ""

msgid ""
"The :func:`distutils.core.setup` function provides a command-line interface "
"that allows you to query the metadata fields of a project through the "
"``setup.py`` script of a given project:"
msgstr ""

msgid ""
"This call reads the ``name`` metadata by running the :func:`distutils.core."
"setup`  function. Although, when a source or binary distribution is created "
"with Distutils, the metadata fields are written in a static file called :"
"file:`PKG-INFO`. When a Distutils-based project is installed in Python, the :"
"file:`PKG-INFO` file is copied alongside the modules and packages of the "
"distribution under :file:`NAME-VERSION-pyX.X.egg-info`, where ``NAME`` is "
"the name of the project, ``VERSION`` its version as defined in the Metadata, "
"and ``pyX.X`` the major and minor version of Python like ``2.7`` or ``3.2``."
msgstr ""

msgid ""
"You can read back this static file, by using the :class:`distutils.dist."
"DistributionMetadata` class and its :func:`read_pkg_file` method::"
msgstr ""

msgid ""
"Notice that the class can also be instantiated with a metadata file path to "
"loads its values::"
msgstr ""
