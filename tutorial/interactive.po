# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Krzysztof Achinger, 2022
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-31 18:02+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Interactive Input Editing and History Substitution"
msgstr "Interaktywna edycja danych wejściowych oraz podstawianie z historii"

msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"Niektóre wersje interpretera Python, podobnie jak ułatwienia znajdowane w "
"powłokach Korn i GNU Bash, wspierają edycję bieżącej linii danych "
"wejściowych oraz podstawianie z historii. Do implementacji użyto biblioteki "
"`GNU Readline`_, która wspiera różne style edytowania. Biblioteka ta ma "
"własną dokumentację, której nie będziemy tutaj powielać."

msgid "Tab Completion and History Editing"
msgstr "Uzupełnianie z tabulatorem oraz edycja historii"

msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`__getattr__` method is part of the expression.  The "
"default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"Uzupełnianie zmiennych i nazw modułów jest :ref:`włączane automatycznie "
"<rlcompleter-config>` podczas uruchamiania interpretera w taki sposób, że "
"klawisz :kbd:`Tab` wywołuje funkcję uzupełniania; sprawdza nazwy instrukcji "
"Pythona, bieżące zmienne lokalne oraz dostępne nazwy modułów. Dla wyrażeń "
"kropkowanych takich jak ``string.a``, ewaluuje wyrażenie do ostaniej "
"``'.'``, a następnie sugeruje uzupełnienie z atrybutów obiektu wynikowego. "
"Zauważ, że może to wykonać zdefiniowany w aplikacji kod, jeżeli obiekt z "
"metodą :meth:`__getattr__` jest częścią wyrażenia. Domyślna konfiguracja "
"zapisuje także twoją historię do pliku :file:`.python_history` w katalogu "
"użytkownika. Historia będzie ponownie dostępna podczas następnej "
"interaktywnej sesji interpretera."

msgid "Alternatives to the Interactive Interpreter"
msgstr "Alternatywy dla interaktywnego interpretera"

msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"To ułatwienie jest olbrzymim krokiem naprzód w porównaniu z wcześniejszymi "
"wersjami interpretera, jednakże, niektóre życzenia pozostają: byłoby dobrze, "
"gdyby prawidłowe wcięcia były podpowiadane w kontynuowanych liniach "
"(analizator składni wie, jeżeli token wcięcia jest dalej wymagany). "
"Mechanizm uzupełniania mógłby używać tabeli symboli interpretera. Polecenie, "
"aby sprawdzić (lub nawet podpowiedzieć) pasujący nawias, cudzysłów itp. "
"także byłoby użyteczne."

msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"Jednym z alternatywnych udoskonalonych interaktywnych interpreterów "
"dostępnych od pewnego czasu jest IPython_, który posiada funkcję "
"uzupełniania tabulatorem, eksplorację obiektów oraz zaawansowane zarządzanie "
"historią. Można go także wszechstronnie dostosowywać oraz osadzać w innych "
"aplikacjach. Innym podobnym udoskonalonym środowiskiem interaktywnego "
"interpretera jest bpython_."
