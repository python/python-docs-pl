# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-07 14:12+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "An Informal Introduction to Python"
msgstr "Nieformalne wprowadzenie do Pythona"

msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"W nadchodzących przykładach wejście i wyjście są rozróżniane przez obecność "
"lub nieobecność promptów (:term:`>>>` i :term:`...`): aby powtórzyć "
"przykład, musisz wpisać wszystko po prompcie, kiedy prompt jest widoczny; "
"linie, które nie zaczynają się promptem są wyjściem z interpretera. Zwróć "
"uwagę, że prompt drugiego rzędu z pustą linią w przykładzie oznacza, że "
"musisz wpisać pustą linię; używa się tego do zakończenia wielo-liniowej "
"komendy."

msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""
"Możesz przełączać wyświetlanie promptów i wyjścia klikając na ``>>>`` w "
"prawym górnym rogu pola z przykładem. Jeśli schowasz prompty i wyjście dla "
"przykładu, wtedy możesz prosto skopiować i wkleić linie wejścia w swój "
"interpreter."

msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"Wiele przykładów w tym manualu, także tych wpisywanych w interaktywnej "
"konsoli, zawiera komentarze. Komentarze w Pythonie zaczynają się znakiem "
"kratki ``#`` i ciągną się do końca fizycznej linii. Komentarz może pojawić "
"się na początku linii, po wiodących spacjach lub kodzie, lecz nie może być "
"zawarty w literale ciągu znaków. Znak kratki w ciągu znaków jest po prostu "
"znakiem kratki. Jako że komentarze mają wyjaśniać kod i nie są "
"interpretowane przez Pythona, można je ominąć przy wpisywaniu przykładów."

msgid "Some examples::"
msgstr "Trochę przykładów::"

msgid "Using Python as a Calculator"
msgstr "Używanie Pythona jako kalkulatora"

msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Wypróbujmy parę prostych poleceń Pythona. Uruchom interpreter i poczekaj na "
"pojawienie się pierwszego znaku zachęty ``>>>``. (Nie powinno to zająć dużo "
"czasu.)"

msgid "Numbers"
msgstr "Liczby"

msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""
"Interpreter działa jak prosty kalkulator: można wpisać do niego wyrażenie, a "
"on wypisze jego wartość. Składnia wyrażenia jest prosta: operatory ``+``, ``-"
"``, ``*`` i ``/`` działają jak w większości innych języków programowania (na "
"przykład Pascal lub C); nawiasów (``()``) można użyć do grupowania. Na "
"przykład::"

msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Liczby całkowite (np. ``2``, ``4``, ``20``) są typu :class:`int`, te z "
"częścią ułamkową (np. ``5.0``, ``1.6``) są typu :class:`float`. Więcej o "
"typach numerycznych dowiemy się więcej później w tym tutorialu."

msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"Dzielenie (``/``) zawsze zwraca liczbę zmiennoprzecinkową. Aby zrobić :term:"
"`dzielenie całkowite <floor division>` i uzyskać wynik całkowity możesz użyć "
"operatora ``//``; aby obliczyć resztę możesz użyć ``%``::"

msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr "W Pythonie możesz użyć operatora ``**``, aby obliczać potęgi [#]_::"

msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"Znak równości (``=``) jest używany do przypisania wartości do zmiennej. "
"Przypisanie do zmiennej nie jest wypisywane przez interpreter::"

msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Jeśli zmienna nie jest „zdefiniowana” (nie ma przypisanej wartości), próba "
"jej użycia spowoduje błąd::"

msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"Python implementuje w pełni arytmetykę zmiennoprzecinkową; operatory z "
"operandami typów mieszanych przekształcają operandy całkowite w "
"zmiennoprzecinkowe::"

msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"W trybie interaktywnym ostatnie wyświetlone wyrażenie jest przypisywane do "
"zmiennej ``_``. Dzięki temu kiedy używasz Pythona jako biurkowego "
"kalkulatora, jest nieco prościej kontynuować obliczenia, na przykład::"

msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"Ta zmienna powinna być traktowana przez użytkownika jako tylko-do-odczytu. "
"Nie przypisuj wprost do niej wartości --- stworzyłbyś niezależną zmienną "
"lokalną o tej samej nazwie maskując wbudowaną zmienną z jej magicznym "
"zachowaniem."

msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"Oprócz :class:`int` i :class:`float`, Python wspiera inne typy liczb, takie "
"jak :class:`~decimal.Decimal` i :class:`~fractions.Fraction`. Python ma też "
"wbudowane wsparcie dla :ref:`liczb złożonych <typesnumeric>` i używa "
"sufiksów ``j`` lub ``J`` do wskazania części urojonej (np. ``3+5j``)."

msgid "Strings"
msgstr "Ciągi znaków"

msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""
"Oprócz liczb Python może również manipulować ciągami znaków, które można "
"wyrazić na parę sposobów. Mogą one być objęte pojedynczym (``'…'``) lub "
"podwójnym cudzysłowem (``\"…\"``) z tym samym efektem [#]_. ``\\`` można "
"użyć, aby zapobiec domyślnej interpretacji znaku cudzysłowu::"

msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes "
"look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""
"W interaktywnym interpreterze wyjściowy ciąg znaków jest otoczony "
"cudzysłowem a znaki specjalne są „uwolnione” ukośnikami wstecznymi. Mimo że "
"może czasem wyglądać inaczej niż wejściowy ciąg znaków (cudzysłów okalający "
"mógł się zmienić), te dwa ciągi znaków są równoważne. Ciąg znaków objęty "
"jest podwójnym cudzysłowem, jeśli zawiera tylko pojedyncze cudzysłowy i nie "
"zawiera podwójnych, w przeciwnym wypadku objęty jest pojedynczym. Funkcja :"
"func:`print` produkuje bardziej czytelne wyście, omijając okalający "
"cudzysłów i drukując „uwolnione” i specjalne znaki::"

msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Jeśli nie chcesz, aby znaki poprzedzone ``\\`` były interpretowane jako "
"znaki specjalne, możesz użyć *surowych ciągów znaków* dodając ``r`` przed "
"pierwszym cudzysłowem::"

msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""

msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\`` "
"at the end of the line.  The following example::"
msgstr ""
"Literały ciągów znaków mogą mieć wiele linii. Można je uzyskać używając "
"potrójnych cudzysłowów: ``\"\"\"…\"\"\"`` lub ``'''…'''``. Końce linii są "
"automatycznie zawarte w ciągu znaków, ale można tego uniknąć dodając ``\\`` "
"na końcu linii. Następujący przykład::"

msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""
"produkuje następujące wyjście (zwróć uwagę, że nie ma pierwszej nowej linii):"

msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"Ciągi mogą być konkatenowane (sklejane) operatorem ``+`` i powtarzane przy "
"użyciu ``*``::"

msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Dwa lub więcej *literałów ciągów* (czyli te zawarte w cudzysłowach) obok "
"siebie są automatycznie konkatenowane. ::"

msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"To zachowanie jest szczególnie przydatne, gdy chcesz łamać długie ciągi::"

msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr "Jednak działa tylko dla literałów, nie dla zmiennych lub wyrażeń::"

msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr "Jeśli chcesz skonkatenować zmienne lub zmienną i literał, użyj ``+``::"

msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"Ciągi znaków mogą być indeksowane. Pierwszy znak ma indeks 0. Nie ma "
"osobnego typu znakowego; znak jest po prostu ciągiem znaków o długości "
"jeden::"

msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""
"Indeksy mogą być też liczbami ujemnymi, aby zacząć odliczać od prawej::"

msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Zwróć uwagę, że jako -0 to to samo co 0, ujemne indeksy zaczynają się od -1."

msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""
"Oprócz indeksowania, dostępne jest także *wykrawanie* (ang. *slicing*). "
"Indeksowania używamy, aby uzyskać pojedyncze znaki, *wykrawanie* pozwala "
"uzyskać podciąg (ang. substring)::"

msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Indeksy wykrawania mają przydatne wartości domyślne; pominięty pierwszy "
"indeks domyślnie jest zerem, pominięty drugi indeks domyślnie ma wartość "
"długości wykrawanego ciągu. ::"

msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Zwróć uwagę, że początkowy indeks wchodzi w skład podciągu, a końcowy nie. W "
"ten sposób ``s[:i] + s[i:]`` jest zawsze równe ``s``::"

msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Sposobem na zapamiętanie, jak działa wykrawanie, to myślenie o indeksach "
"wskazujących *pomiędzy* znakami, z lewą krawędzią pierwszego znaku "
"numerowaną 0. Wtedy prawa krawędź ostatniego znaku ciągu o długości *n* ma "
"indeks *n*, na przykład::"

msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"W pierwszym wierszu liczb są pozycje indeksów od 0 do 6 w ciągu. W drugim "
"wierszu odpowiadające im indeksy ujemne. Slice od *i* do *j* składa się ze "
"wszystkich znaków pomiędzy krawędziami oznaczonymi kolejno *i* i *j*."

msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"Dla nieujemnych indeksów długość slice'a to różnica indeksów, jeśli oba "
"mieszczą się w zakresie. Na przykład długość ``word[1:3]`` to 2."

msgid "Attempting to use an index that is too large will result in an error::"
msgstr "Próba użycia za dużego indeksu skończy się błędem::"

msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"Jednak indeksy wykrawania poza zakresem są obsłużone bezpiecznie przy "
"wykrawaniu::"

msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"Ciągi znaków Pythona nie mogą być zmieniane — są :term:`niemutowalne "
"<immutable>`. W związku z tym przypisywanie wartości do indeksowanej pozycji "
"w ciągu spowoduje błąd::"

msgid "If you need a different string, you should create a new one::"
msgstr ""
"Jeśli potrzebujesz innego ciągu znaków, powinieneś(-nnaś) stworzyć nowy::"

msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "Wbudowana funkcja :func:`len` zwraca długość ciągu::"

msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"Ciągi znaków są przykładami *typów sekwencyjnych* i obsługują wspólne "
"operacje wspierane przez takie typy."

msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"Ciągi znaków wspierają dużą liczbę metod do podstawowych przekształceń i "
"wyszukiwania."

msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

msgid "String literals that have embedded expressions."
msgstr "Literały ciągów znaków z osadzonymi wyrażeniami."

msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

msgid "Information about string formatting with :meth:`str.format`."
msgstr ""
"Informacje o formatowaniu ciągów znaków przy użyciu :meth:`str.format`."

msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"Stare operacje formatowania, wywoływane gdy ciągi znaków są lewymi "
"operandami operatora ``%`` są opisane tutaj bardziej szczegółowo."

msgid "Lists"
msgstr "Listy"

msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"Python ma kilka *złożonych* typów danych, używanych do grupowania różnych "
"wartości. Najbardziej wszechstronnym jest *lista*, która może zostać "
"zapisana jako lista wartości (elementów) rozdzielonych przecinkami ujęta w "
"nawiasy kwadratowe. Listy mogą zawierać elementy różnych typów, ale "
"zazwyczaj wszystkie elementy mają ten sam typ. ::"

msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"Tak jak ciągi znaków (i wszystkie inne wbudowane typy :term:`sekwencyjne "
"<sequence>`), do elementów list można odwoływać się przez indeksy oraz można "
"z nich „wykrawać”::"

msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"Wszystkie operacje wykrawania zwracają nową listę zawierającą żądane "
"elementy. Następujący slice więc zwraca :ref:`płytką kopię "
"<shallow_vs_deep_copy>` listy::"

msgid "Lists also support operations like concatenation::"
msgstr "Listy wspierają też operacje takie jak konkatenacja::"

msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"W przeciwieństwie do ciągów znaków, które są :term:`niemutowalne "
"<immutable>`, listy są typem :term:`mutowalnym <mutable>`, w szczególności "
"można zmieniać ich treść::"

msgid ""
"You can also add new items at the end of the list, by using the :meth:`~list."
"append` *method* (we will see more about methods later)::"
msgstr ""
"Można również dodawać nowe elementy na końcu listy, przez użycie *metody* "
"(dowiemy się więcej o metodach później) :meth:`~list.append`::"

msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"Możliwe jest również przypisywanie do slice'ów. Może to zmienić rozmiar "
"listy lub zupełnie ją wyczyścić::"

msgid "The built-in function :func:`len` also applies to lists::"
msgstr "Wbudowana funkcja :func:`len` ma również zastosowanie do list::"

msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"Można zagnieżdżać listy (tworzyć listy zawierające inne listy), na przykład::"

msgid "First Steps Towards Programming"
msgstr "Pierwsze kroki do programowania"

msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""
"Oczywiście możemy używać Pythona do zadań bardziej skomplikowanych niż "
"dodawanie dwóch do dwóch. Na przykład możemy napisać początkowy podciąg "
"`ciągu Fibonacciego <https://pl.wikipedia.org/wiki/Ci%C4%85g_Fibonacciego>`_ "
"następująco::"

msgid "This example introduces several new features."
msgstr "Ten przykład wprowadza kilka nowych funkcji."

msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"Pierwsza linia zawiera *wielokrotne przypisanie*: zmienne ``a`` i ``b`` "
"jednocześnie dostają nowe wartości 0 i 1. W ostatniej linii jest ponownie "
"wykorzystane, demonstrując, że wyrażenia po prawej stronie są ewaluowane "
"wcześniej, zanim którekolwiek z przypisań ma miejsce. Wyrażenia po prawej "
"stronie są ewaluowane od lewej do prawej."

msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"Pętla :keyword:`while` wykonuje się dopóki warunek (tutaj: ``a < 10``) "
"pozostaje prawdziwy. W Pythonie, tak jak w C, każda niezerowa liczba "
"całkowita jest prawdziwa; zero jest fałszywe. Warunek może być również "
"ciągiem znaków lub listą, tak naprawdę jakąkolwiek sekwencją; cokolwiek o "
"niezerowej długości jest prawdziwe, puste sekwencje są fałszywe. Warunek "
"użyty w przykładzie jest prostym porównaniem. Standardowe operatory porównań "
"pisane są tak samo jak w C: ``<`` (mniejsze niż), ``>`` (większe niż), "
"``==`` (równe), ``<=`` (mniejsze lub równe), ``>=`` (większe lub równe) i ``!"
"=`` (różne)."

msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"*Ciało* pętli jest *wcięte*: indentacja (wcięcia) jest sposobem na "
"grupowanie instrukcji. W trybie interaktywnym trzeba wprowadzić znak(i) "
"spacji lub tabulacji, aby wciąć wiersz. W praktyce będziesz przygotowywać "
"bardziej skomplikowane dane wejściowe dla Pythona za pomocą edytora tekstu; "
"wszystkie przyzwoite edytory tekstu mają funkcję automatycznych wcięć. W "
"chwili, gdy wprowadza się jakąś instrukcję złożoną w czasie sesji "
"interpretera Pythona, trzeba zakończyć ją pustym wierszem (bowiem "
"interpreter nie wie, czy ostatni wprowadzony wiersz jest ostatnim z tej "
"instrukcji). Ważne jest, aby każdy wiersz należący do tej samej grupy "
"instrukcji, był wcięty o taką samą liczbę spacji lub znaków tabulacji."

msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""
"Funkcja :func:`print` wypisuje wartość argumentu(-ów), które jej podano. "
"Różnica pomiędzy tą instrukcją, a zwykłym zapisem wyrażenia, które chce się "
"wypisać (tak jak robiliśmy to w przykładzie z kalkulatorem) występuje w "
"sposobie obsługi wielu wyrażeń i napisów. Łańcuchy znaków wypisywane są bez "
"cudzysłowów, a pomiędzy nimi zapisywane są spacje, tak aby można było ładnie "
"sformatować pojawiający się napis, na przykład::"

msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"Keyword argument *end* można wykorzystać, aby uniknąć znaku nowej linii po "
"wypisaniu lub aby zakończyć wypisanie innym ciągiem znaków::"

msgid "Footnotes"
msgstr "Przypisy"

msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"Jako że ``**`` ma wyższą precedencję niż ``-``, ``-3**2`` zostanie "
"zinterpretowane jako ``-(3**2)`` i zwróci ``-9``. Aby tego uniknąć i "
"otrzymać ``9``, możesz użyć ``(-3)**2``."

msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"W przeciwieństwie do innych języków, znaki specjalne takie jak ``\\n`` mają "
"to samo znaczenie zarówno z pojedynczym (``'…'``) jak i podwójnym (``\"…"
"\"``) cudzysłowem. Jedyną różnicą między nimi jest to, że wewnątrz "
"pojedynczego cudzysłowu nie musisz escape'ować ``\"`` (lecz musisz "
"escape'ować ``\\'``) i vice versa."
