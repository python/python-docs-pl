# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Memory Management"
msgstr "Zarządzanie Pamięcią"

msgid "Overview"
msgstr "Skorowidz"

msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""
"Zarządzanie pamięcią w Pythonie zakłada prywatną stertę zawierającą "
"wszystkie obiekty i struktury danych Pythona. Zarządzanie tą prywatną stertą "
"jest zapewniane wewnętrznie przez *zarządcę pamięci Pythona*. Zarządca "
"pamięci Pythona ma różne komponenty które radzą sobie z różnymi aspektami "
"dynamicznego przechowywania, jak współdzielenie, segmentacja, alokacja "
"wstępna i kieszeniowanie."

msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""
"Na najniższym poziomie, przedmiot przydzielający pamięć \"na-surowo\" "
"zapewnia że będzie dość pamięci na prywatnej stercie dla przechowania "
"wszystkich związanych-z-językiem-pytonowskim danych przez współdziałanie z "
"zarządcą pamięci systemu operacyjnego. Ponad zarządcą surowej pamięci, kilka "
"szczególnych dla danych typów przedmiotów zarządców operuje na tej samej "
"stercie i wypełnia szczególne zasady zarządzania pamięcią dostosowane do "
"szczególnych własności każdego rodzaju przedmiotu. Dla przykładu przedmioty "
"liczb całkowitych są zarządzane inaczej wewnątrz sterty niż ciągi znaków, "
"krotki czy słowniki gdyż liczby całkowite zakładają inne wymagania "
"przechowywania i wady i zalety prędkości/zajętej przestrzeni. Zarządca "
"pamięcią Pythona zatem odprawia pewną ilość nakładów pracy dla szczególnych "
"dla przedmiotów różnych typów zarządców, ale zapewnia że te drugie będą "
"operować wewnątrz ograniczeń prywatnej sterty."

msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if they regularly manipulate object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other "
"internal buffers is performed on demand by the Python memory manager through "
"the Python/C API functions listed in this document."
msgstr ""

msgid ""
"To avoid memory corruption, extension writers should never try to operate on "
"Python objects with the functions exported by the C library: :c:func:"
"`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  This will "
"result in  mixed calls between the C allocator and the Python memory manager "
"with fatal consequences, because they implement different algorithms and "
"operate on different heaps.  However, one may safely allocate and release "
"memory blocks with the C library allocator for individual purposes, as shown "
"in the following example::"
msgstr ""

msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the bytes object returned as a result."
msgstr ""

msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used "
"exclusively for internal, highly specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to configure the "
"memory allocators used by Python."
msgstr ""

msgid ""
"The :envvar:`PYTHONMALLOCSTATS` environment variable can be used to print "
"statistics of the :ref:`pymalloc memory allocator <pymalloc>` every time a "
"new pymalloc object arena is created, and on shutdown."
msgstr ""

msgid "Allocator Domains"
msgstr ""

msgid ""
"All allocating functions belong to one of three different \"domains\" (see "
"also :c:type:`PyMemAllocatorDomain`). These domains represent different "
"allocation strategies and are optimized for different purposes. The specific "
"details on how every domain allocates memory or what internal functions each "
"domain calls is considered an implementation detail, but for debugging "
"purposes a simplified table can be found at :ref:`here <default-memory-"
"allocators>`. There is no hard requirement to use the memory returned by the "
"allocation functions belonging to a given domain for only the purposes "
"hinted by that domain (although this is the recommended practice). For "
"example, one could use the memory returned by :c:func:`PyMem_RawMalloc` for "
"allocating Python objects or the memory returned by :c:func:"
"`PyObject_Malloc` for allocating memory for buffers."
msgstr ""

msgid "The three allocation domains are:"
msgstr ""

msgid ""
"Raw domain: intended for allocating memory for general-purpose memory "
"buffers where the allocation *must* go to the system allocator or where the "
"allocator can operate without the :term:`GIL`. The memory is requested "
"directly to the system."
msgstr ""

msgid ""
"\"Mem\" domain: intended for allocating memory for Python buffers and "
"general-purpose memory buffers where the allocation must be performed with "
"the :term:`GIL` held. The memory is taken from the Python private heap."
msgstr ""

msgid ""
"Object domain: intended for allocating memory belonging to Python objects. "
"The memory is taken from the Python private heap."
msgstr ""

msgid ""
"When freeing memory previously allocated by the allocating functions "
"belonging to a given domain,the matching specific deallocating functions "
"must be used. For example, :c:func:`PyMem_Free` must be used to free memory "
"allocated using :c:func:`PyMem_Malloc`."
msgstr ""

msgid "Raw Memory Interface"
msgstr ""

msgid ""
"The following function sets are wrappers to the system allocator. These "
"functions are thread-safe, the :term:`GIL <global interpreter lock>` does "
"not need to be held."
msgstr ""

msgid ""
"The :ref:`default raw memory allocator <default-memory-allocators>` uses the "
"following functions: :c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` "
"and :c:func:`free`; call ``malloc(1)`` (or ``calloc(1, 1)``) when requesting "
"zero bytes."
msgstr ""

msgid ""
"Allocates *n* bytes and returns a pointer of type :c:expr:`void*` to the "
"allocated memory, or ``NULL`` if the request fails."
msgstr ""

msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_RawMalloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""

msgid ""
"Allocates *nelem* elements each whose size in bytes is *elsize* and returns "
"a pointer of type :c:expr:`void*` to the allocated memory, or ``NULL`` if "
"the request fails. The memory is initialized to zeros."
msgstr ""

msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_RawCalloc(1, 1)`` had been "
"called instead."
msgstr ""

msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes."
msgstr ""

msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_RawMalloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""

msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or :c:func:"
"`PyMem_RawCalloc`."
msgstr ""

msgid ""
"If the request fails, :c:func:`PyMem_RawRealloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or :c:"
"func:`PyMem_RawCalloc`.  Otherwise, or if ``PyMem_RawFree(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""

msgid "If *p* is ``NULL``, no operation is performed."
msgstr ""

msgid "Memory Interface"
msgstr "Sprzęg Pamięci"

msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating "
"and releasing memory from the Python heap."
msgstr ""

msgid ""
"The :ref:`default memory allocator <default-memory-allocators>` uses the :"
"ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

msgid ""
"The :term:`GIL <global interpreter lock>` must be held when using these "
"functions."
msgstr ""

msgid ""
"The default allocator is now pymalloc instead of system :c:func:`malloc`."
msgstr ""

msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_Malloc(1)`` had been called instead. The memory will not have "
"been initialized in any way."
msgstr ""

msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_Calloc(1, 1)`` had been "
"called instead."
msgstr ""

msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_Malloc(n)``; else if "
"*n* is equal to zero, the memory block is resized but is not freed, and the "
"returned pointer is non-``NULL``."
msgstr ""

msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or :c:func:`PyMem_Calloc`."
msgstr ""

msgid ""
"If the request fails, :c:func:`PyMem_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or :c:func:"
"`PyMem_Calloc`.  Otherwise, or if ``PyMem_Free(p)`` has been called before, "
"undefined behavior occurs."
msgstr ""

msgid ""
"The following type-oriented macros are provided for convenience.  Note  that "
"*TYPE* refers to any C type."
msgstr ""
"Następujące makropolecenia zorientowane-według-typu dostarczone są dla "
"wygody. Zauważ że *TYP* odnosi się do dowolnego typu C."

msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:expr:`TYPE*`.  The memory will not "
"have been initialized in any way."
msgstr ""

msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:expr:`TYPE*`. On "
"return, *p* will be a pointer to the new memory area, or ``NULL`` in the "
"event of failure."
msgstr ""

msgid ""
"This is a C preprocessor macro; *p* is always reassigned.  Save the original "
"value of *p* to avoid losing memory when handling errors."
msgstr ""

msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""
"Dodać należy, że następujący zbiór makropoleceń dostarczony jest aby "
"odwoływać się do programu przydzielającego pamięć w języku pytonowskim "
"bezpośrednio, bez udziału zadań sprzęgu C wymienionych powyżej. Jednakże, "
"zauważ, że ich użycie nie zachowuje wzajemnej zgodności binarnej pomiędzy "
"wersjami Pythona i z tego też powodu ich użycie jest niewskazane w modułach "
"rozszerzających."

msgid "``PyMem_MALLOC(size)``"
msgstr ""

msgid "``PyMem_NEW(type, size)``"
msgstr ""

msgid "``PyMem_REALLOC(ptr, size)``"
msgstr ""

msgid "``PyMem_RESIZE(ptr, type, size)``"
msgstr ""

msgid "``PyMem_FREE(ptr)``"
msgstr ""

msgid "``PyMem_DEL(ptr)``"
msgstr ""

msgid "Object allocators"
msgstr ""

msgid ""
"There is no guarantee that the memory returned by these allocators can be "
"successfully cast to a Python object when intercepting the allocating "
"functions in this domain by the methods described in the :ref:`Customize "
"Memory Allocators <customize-memory-allocators>` section."
msgstr ""

msgid ""
"The :ref:`default object allocator <default-memory-allocators>` uses the :"
"ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyObject_Malloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""

msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyObject_Calloc(1, 1)`` had been "
"called instead."
msgstr ""

msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyObject_Malloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""

msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to :c:"
"func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or :c:func:"
"`PyObject_Calloc`."
msgstr ""

msgid ""
"If the request fails, :c:func:`PyObject_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""

msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or :c:"
"func:`PyObject_Calloc`.  Otherwise, or if ``PyObject_Free(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""

msgid "Default Memory Allocators"
msgstr ""

msgid "Default memory allocators:"
msgstr ""

msgid "Configuration"
msgstr ""

msgid "Name"
msgstr "Nazwa"

msgid "PyMem_RawMalloc"
msgstr ""

msgid "PyMem_Malloc"
msgstr ""

msgid "PyObject_Malloc"
msgstr ""

msgid "Release build"
msgstr ""

msgid "``\"pymalloc\"``"
msgstr ""

msgid "``malloc``"
msgstr ""

msgid "``pymalloc``"
msgstr ""

msgid "Debug build"
msgstr ""

msgid "``\"pymalloc_debug\"``"
msgstr ""

msgid "``malloc`` + debug"
msgstr ""

msgid "``pymalloc`` + debug"
msgstr ""

msgid "Release build, without pymalloc"
msgstr ""

msgid "``\"malloc\"``"
msgstr ""

msgid "Debug build, without pymalloc"
msgstr ""

msgid "``\"malloc_debug\"``"
msgstr ""

msgid "Legend:"
msgstr ""

msgid "Name: value for :envvar:`PYTHONMALLOC` environment variable."
msgstr ""

msgid ""
"``malloc``: system allocators from the standard C library, C functions: :c:"
"func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`."
msgstr ""

msgid "``pymalloc``: :ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""

msgid ""
"\"+ debug\": with :ref:`debug hooks on the Python memory allocators <pymem-"
"debug-hooks>`."
msgstr ""

msgid "\"Debug build\": :ref:`Python build in debug mode <debug-build>`."
msgstr ""

msgid "Customize Memory Allocators"
msgstr ""

msgid ""
"Structure used to describe a memory block allocator. The structure has the "
"following fields:"
msgstr ""

msgid "Field"
msgstr ""

msgid "Meaning"
msgstr "Znaczenie"

msgid "``void *ctx``"
msgstr ""

msgid "user context passed as first argument"
msgstr ""

msgid "``void* malloc(void *ctx, size_t size)``"
msgstr ""

msgid "allocate a memory block"
msgstr ""

msgid "``void* calloc(void *ctx, size_t nelem, size_t elsize)``"
msgstr ""

msgid "allocate a memory block initialized with zeros"
msgstr ""

msgid "``void* realloc(void *ctx, void *ptr, size_t new_size)``"
msgstr ""

msgid "allocate or resize a memory block"
msgstr ""

msgid "``void free(void *ctx, void *ptr)``"
msgstr ""

msgid "free a memory block"
msgstr ""

msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to :c:type:"
"`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""

msgid "Enum used to identify an allocator domain. Domains:"
msgstr ""

msgid "Functions:"
msgstr ""

msgid ":c:func:`PyMem_RawMalloc`"
msgstr ""

msgid ":c:func:`PyMem_RawRealloc`"
msgstr ""

msgid ":c:func:`PyMem_RawCalloc`"
msgstr ""

msgid ":c:func:`PyMem_RawFree`"
msgstr ""

msgid ":c:func:`PyMem_Malloc`,"
msgstr ""

msgid ":c:func:`PyMem_Realloc`"
msgstr ""

msgid ":c:func:`PyMem_Calloc`"
msgstr ""

msgid ":c:func:`PyMem_Free`"
msgstr ""

msgid ":c:func:`PyObject_Malloc`"
msgstr ""

msgid ":c:func:`PyObject_Realloc`"
msgstr ""

msgid ":c:func:`PyObject_Calloc`"
msgstr ""

msgid ":c:func:`PyObject_Free`"
msgstr ""

msgid "Get the memory block allocator of the specified domain."
msgstr ""

msgid "Set the memory block allocator of the specified domain."
msgstr ""

msgid ""
"The new allocator must return a distinct non-``NULL`` pointer when "
"requesting zero bytes."
msgstr ""

msgid ""
"For the :c:data:`PYMEM_DOMAIN_RAW` domain, the allocator must be thread-"
"safe: the :term:`GIL <global interpreter lock>` is not held when the "
"allocator is called."
msgstr ""

msgid ""
"If the new allocator is not a hook (does not call the previous allocator), "
"the :c:func:`PyMem_SetupDebugHooks` function must be called to reinstall the "
"debug hooks on top on the new allocator."
msgstr ""

msgid ""
"See also :c:member:`PyPreConfig.allocator` and :ref:`Preinitialize Python "
"with PyPreConfig <c-preinit>`."
msgstr ""

msgid ":c:func:`PyMem_SetAllocator` does have the following contract:"
msgstr ""

msgid ""
"It can be called after :c:func:`Py_PreInitialize` and before :c:func:"
"`Py_InitializeFromConfig` to install a custom memory allocator. There are no "
"restrictions over the installed allocator other than the ones imposed by the "
"domain (for instance, the Raw Domain allows the allocator to be called "
"without the GIL held). See :ref:`the section on allocator domains <allocator-"
"domains>` for more information."
msgstr ""

msgid ""
"If called after Python has finish initializing (after :c:func:"
"`Py_InitializeFromConfig` has been called) the allocator **must** wrap the "
"existing allocator. Substituting the current allocator for some other "
"arbitrary one is **not supported**."
msgstr ""

msgid ""
"Setup :ref:`debug hooks in the Python memory allocators <pymem-debug-hooks>` "
"to detect memory errors."
msgstr ""

msgid "Debug hooks on the Python memory allocators"
msgstr ""

msgid ""
"When :ref:`Python is built in debug mode <debug-build>`, the :c:func:"
"`PyMem_SetupDebugHooks` function is called at the :ref:`Python "
"preinitialization <c-preinit>` to setup debug hooks on Python memory "
"allocators to detect memory errors."
msgstr ""

msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to install debug "
"hooks on a Python compiled in release mode (ex: ``PYTHONMALLOC=debug``)."
msgstr ""

msgid ""
"The :c:func:`PyMem_SetupDebugHooks` function can be used to set debug hooks "
"after calling :c:func:`PyMem_SetAllocator`."
msgstr ""

msgid ""
"These debug hooks fill dynamically allocated memory blocks with special, "
"recognizable bit patterns. Newly allocated memory is filled with the byte "
"``0xCD`` (``PYMEM_CLEANBYTE``), freed memory is filled with the byte "
"``0xDD`` (``PYMEM_DEADBYTE``). Memory blocks are surrounded by \"forbidden "
"bytes\" filled with the byte ``0xFD`` (``PYMEM_FORBIDDENBYTE``). Strings of "
"these bytes are unlikely to be valid addresses, floats, or ASCII strings."
msgstr ""

msgid "Runtime checks:"
msgstr ""

msgid ""
"Detect API violations. For example, detect if :c:func:`PyObject_Free` is "
"called on a memory block allocated by :c:func:`PyMem_Malloc`."
msgstr ""

msgid "Detect write before the start of the buffer (buffer underflow)."
msgstr ""

msgid "Detect write after the end of the buffer (buffer overflow)."
msgstr ""

msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and :"
"c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are called."
msgstr ""

msgid ""
"On error, the debug hooks use the :mod:`tracemalloc` module to get the "
"traceback where a memory block was allocated. The traceback is only "
"displayed if :mod:`tracemalloc` is tracing Python memory allocations and the "
"memory block was traced."
msgstr ""

msgid ""
"Let *S* = ``sizeof(size_t)``. ``2*S`` bytes are added at each end of each "
"block of *N* bytes requested.  The memory layout is like so, where p "
"represents the address returned by a malloc-like or realloc-like function "
"(``p[i:j]`` means the slice of bytes from ``*(p+i)`` inclusive up to "
"``*(p+j)`` exclusive; note that the treatment of negative indices differs "
"from a Python slice):"
msgstr ""

msgid "``p[-2*S:-S]``"
msgstr ""

msgid ""
"Number of bytes originally asked for.  This is a size_t, big-endian (easier "
"to read in a memory dump)."
msgstr ""

msgid "``p[-S]``"
msgstr ""

msgid "API identifier (ASCII character):"
msgstr ""

msgid "``'r'`` for :c:data:`PYMEM_DOMAIN_RAW`."
msgstr ""

msgid "``'m'`` for :c:data:`PYMEM_DOMAIN_MEM`."
msgstr ""

msgid "``'o'`` for :c:data:`PYMEM_DOMAIN_OBJ`."
msgstr ""

msgid "``p[-S+1:0]``"
msgstr ""

msgid "Copies of PYMEM_FORBIDDENBYTE.  Used to catch under- writes and reads."
msgstr ""

msgid "``p[0:N]``"
msgstr ""

msgid ""
"The requested memory, filled with copies of PYMEM_CLEANBYTE, used to catch "
"reference to uninitialized memory.  When a realloc-like function is called "
"requesting a larger memory block, the new excess bytes are also filled with "
"PYMEM_CLEANBYTE.  When a free-like function is called, these are overwritten "
"with PYMEM_DEADBYTE, to catch reference to freed memory.  When a realloc- "
"like function is called requesting a smaller memory block, the excess old "
"bytes are also filled with PYMEM_DEADBYTE."
msgstr ""

msgid "``p[N:N+S]``"
msgstr ""

msgid "Copies of PYMEM_FORBIDDENBYTE.  Used to catch over- writes and reads."
msgstr ""

msgid "``p[N+S:N+2*S]``"
msgstr ""

msgid ""
"Only used if the ``PYMEM_DEBUG_SERIALNO`` macro is defined (not defined by "
"default)."
msgstr ""

msgid ""
"A serial number, incremented by 1 on each call to a malloc-like or realloc-"
"like function.  Big-endian ``size_t``.  If \"bad memory\" is detected later, "
"the serial number gives an excellent way to set a breakpoint on the next "
"run, to capture the instant at which this block was passed out.  The static "
"function bumpserialno() in obmalloc.c is the only place the serial number is "
"incremented, and exists so you can set such a breakpoint easily."
msgstr ""

msgid ""
"A realloc-like or free-like function first checks that the "
"PYMEM_FORBIDDENBYTE bytes at each end are intact.  If they've been altered, "
"diagnostic output is written to stderr, and the program is aborted via "
"Py_FatalError().  The other main failure mode is provoking a memory error "
"when a program reads up one of the special bit patterns and tries to use it "
"as an address.  If you get in a debugger then and look at the object, you're "
"likely to see that it's entirely filled with PYMEM_DEADBYTE (meaning freed "
"memory is getting used) or PYMEM_CLEANBYTE (meaning uninitialized memory is "
"getting used)."
msgstr ""

msgid ""
"The :c:func:`PyMem_SetupDebugHooks` function now also works on Python "
"compiled in release mode.  On error, the debug hooks now use :mod:"
"`tracemalloc` to get the traceback where a memory block was allocated. The "
"debug hooks now also check if the GIL is held when functions of :c:data:"
"`PYMEM_DOMAIN_OBJ` and :c:data:`PYMEM_DOMAIN_MEM` domains are called."
msgstr ""

msgid ""
"Byte patterns ``0xCB`` (``PYMEM_CLEANBYTE``), ``0xDB`` (``PYMEM_DEADBYTE``) "
"and ``0xFB`` (``PYMEM_FORBIDDENBYTE``) have been replaced with ``0xCD``, "
"``0xDD`` and ``0xFD`` to use the same values than Windows CRT debug "
"``malloc()`` and ``free()``."
msgstr ""

msgid "The pymalloc allocator"
msgstr ""

msgid ""
"Python has a *pymalloc* allocator optimized for small objects (smaller or "
"equal to 512 bytes) with a short lifetime. It uses memory mappings called "
"\"arenas\" with a fixed size of 256 KiB. It falls back to :c:func:"
"`PyMem_RawMalloc` and :c:func:`PyMem_RawRealloc` for allocations larger than "
"512 bytes."
msgstr ""

msgid ""
"*pymalloc* is the :ref:`default allocator <default-memory-allocators>` of "
"the :c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) and :c:data:"
"`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) domains."
msgstr ""

msgid "The arena allocator uses the following functions:"
msgstr ""

msgid ":c:func:`VirtualAlloc` and :c:func:`VirtualFree` on Windows,"
msgstr ""

msgid ":c:func:`mmap` and :c:func:`munmap` if available,"
msgstr ""

msgid ":c:func:`malloc` and :c:func:`free` otherwise."
msgstr ""

msgid ""
"This allocator is disabled if Python is configured with the :option:`--"
"without-pymalloc` option. It can also be disabled at runtime using the :"
"envvar:`PYTHONMALLOC` environment variable (ex: ``PYTHONMALLOC=malloc``)."
msgstr ""

msgid "Customize pymalloc Arena Allocator"
msgstr ""

msgid ""
"Structure used to describe an arena allocator. The structure has three "
"fields:"
msgstr ""

msgid "``void* alloc(void *ctx, size_t size)``"
msgstr ""

msgid "allocate an arena of size bytes"
msgstr ""

msgid "``void free(void *ctx, void *ptr, size_t size)``"
msgstr ""

msgid "free an arena"
msgstr ""

msgid "Get the arena allocator."
msgstr ""

msgid "Set the arena allocator."
msgstr ""

msgid "tracemalloc C API"
msgstr ""

msgid "Track an allocated memory block in the :mod:`tracemalloc` module."
msgstr ""

msgid ""
"Return ``0`` on success, return ``-1`` on error (failed to allocate memory "
"to store the trace). Return ``-2`` if tracemalloc is disabled."
msgstr ""

msgid "If memory block is already tracked, update the existing trace."
msgstr ""

msgid ""
"Untrack an allocated memory block in the :mod:`tracemalloc` module. Do "
"nothing if the block was not tracked."
msgstr ""

msgid "Return ``-2`` if tracemalloc is disabled, otherwise return ``0``."
msgstr ""

msgid "Examples"
msgstr "Przykłady"

msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function "
"set::"
msgstr ""
"Tutaj jest przykład z sekcji \"przeglądu pamięci\" - z ang. - :ref:"
"`memoryoverview`, przepisane, tak aby przestrzeń wejścia/wyjścia była "
"przydzielona ze sterty Pythona używając pierwszego zestawu zadań::"

msgid "The same code using the type-oriented function set::"
msgstr "ten sam kod przy użyciu zorientowanych na typ zbiorów zadań::"

msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two "
"different allocators operating on different heaps. ::"
msgstr ""
"Zauważ, że w dwóch powyższych przykładach, przestrzeń wymiany jest zawsze "
"zmieniana przez zadania należące do tego samego zbioru. Właściwie, jest "
"wymagane użycie tej samej rodziny sprzęgów zarządzania pamięcią (z ang. - "
"memory API) dla danego obszaru pamięci, tak, że ryzyko pomieszania różnych "
"programów lokujących zmniejszone jest do minimum. Następująca sekwencja "
"zawiera dwa błędy, jeden z których określony jest jako *krytyczny* ponieważ "
"miesza dwa różne programy lokujące pamięć działające na różnych stertach. ::"

msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar` and :c:func:`PyObject_Del`."
msgstr ""

msgid ""
"These will be explained in the next chapter on defining and implementing new "
"object types in C."
msgstr ""
"Te zostaną wyjaśnione w następnym rozdziale o określaniu i realizowaniu "
"nowych typów obiektów w języku C."
