# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-07 14:12+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Tuple Objects"
msgstr ""

msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type; it "
"is the same object as :class:`tuple` in the Python layer."
msgstr ""

msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of "
"the tuple type.  This function always succeeds."
msgstr ""

msgid "Return a new tuple object of size *len*, or ``NULL`` on failure."
msgstr ""

msgid ""
"Return a new tuple object of size *n*, or ``NULL`` on failure. The tuple "
"values are initialized to the subsequent *n* C arguments pointing to Python "
"objects. ``PyTuple_Pack(2, a, b)`` is equivalent to "
"``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""

msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

msgid ""
"Return the size of the tuple *p*, which must be non-``NULL`` and point to a "
"tuple; no error checking is performed."
msgstr ""

msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is negative or out of bounds, return ``NULL`` and set an :exc:"
"`IndexError` exception."
msgstr ""

msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

msgid ""
"Return the slice of the tuple pointed to by *p* between *low* and *high*, or "
"``NULL`` on failure.  This is the equivalent of the Python expression "
"``p[low:high]``.  Indexing from the end of the list is not supported."
msgstr ""

msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed to "
"by *p*.  Return ``0`` on success.  If *pos* is out of bounds, return ``-1`` "
"and set an :exc:`IndexError` exception."
msgstr ""

msgid ""
"This function \"steals\" a reference to *o* and discards a reference to an "
"item already in the tuple at the affected position."
msgstr ""

msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""

msgid ""
"This function \"steals\" a reference to *o*, and, unlike :c:func:"
"`PyTuple_SetItem`, does *not* discard a reference to any item that is being "
"replaced; any reference in the tuple at position *pos* will be leaked."
msgstr ""

msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be "
"used if there is only one reference to the object.  Do *not* use this if the "
"tuple may already be known to some other part of the code.  The tuple will "
"always grow or shrink at the end.  Think of this as destroying the old tuple "
"and creating a new one, only more efficiently.  Returns ``0`` on success. "
"Client code should never assume that the resulting value of ``*p`` will be "
"the same as before calling this function. If the object referenced by ``*p`` "
"is replaced, the original ``*p`` is destroyed.  On failure, returns ``-1`` "
"and sets ``*p`` to ``NULL``, and raises :exc:`MemoryError` or :exc:"
"`SystemError`."
msgstr ""

msgid "Struct Sequence Objects"
msgstr ""

msgid ""
"Struct sequence objects are the C equivalent of :func:`~collections."
"namedtuple` objects, i.e. a sequence whose items can also be accessed "
"through attributes. To create a struct sequence, you first have to create a "
"specific struct sequence type."
msgstr ""

msgid ""
"Create a new struct sequence type from the data in *desc*, described below. "
"Instances of the resulting type can be created with :c:func:"
"`PyStructSequence_New`."
msgstr ""

msgid "Initializes a struct sequence type *type* from *desc* in place."
msgstr ""

msgid ""
"The same as ``PyStructSequence_InitType``, but returns ``0`` on success and "
"``-1`` on failure."
msgstr ""

msgid "Contains the meta information of a struct sequence type to create."
msgstr ""

msgid "Field"
msgstr ""

msgid "C Type"
msgstr "typ jÄ™zyka C"

msgid "Meaning"
msgstr "Znaczenie"

msgid "``name``"
msgstr "``nazwa``"

msgid "``const char *``"
msgstr ""

msgid "name of the struct sequence type"
msgstr ""

msgid "``doc``"
msgstr ""

msgid "pointer to docstring for the type or ``NULL`` to omit"
msgstr ""

msgid "``fields``"
msgstr ""

msgid "``PyStructSequence_Field *``"
msgstr ""

msgid "pointer to ``NULL``-terminated array with field names of the new type"
msgstr ""

msgid "``n_in_sequence``"
msgstr ""

msgid "``int``"
msgstr ""

msgid "number of fields visible to the Python side (if used as tuple)"
msgstr ""

msgid ""
"Describes a field of a struct sequence. As a struct sequence is modeled as a "
"tuple, all fields are typed as :c:expr:`PyObject*`.  The index in the :attr:"
"`fields` array of the :c:type:`PyStructSequence_Desc` determines which field "
"of the struct sequence is described."
msgstr ""

msgid ""
"name for the field or ``NULL`` to end the list of named fields, set to :c:"
"data:`PyStructSequence_UnnamedField` to leave unnamed"
msgstr ""

msgid "field docstring or ``NULL`` to omit"
msgstr ""

msgid "Special value for a field name to leave it unnamed."
msgstr ""

msgid "The type was changed from ``char *``."
msgstr ""

msgid ""
"Creates an instance of *type*, which must have been created with :c:func:"
"`PyStructSequence_NewType`."
msgstr ""

msgid ""
"Return the object at position *pos* in the struct sequence pointed to by "
"*p*. No bounds checking is performed."
msgstr ""

msgid "Macro equivalent of :c:func:`PyStructSequence_GetItem`."
msgstr ""

msgid ""
"Sets the field at index *pos* of the struct sequence *p* to value *o*.  "
"Like :c:func:`PyTuple_SET_ITEM`, this should only be used to fill in brand "
"new instances."
msgstr ""

msgid "This function \"steals\" a reference to *o*."
msgstr ""

msgid ""
"Similar to :c:func:`PyStructSequence_SetItem`, but implemented as a static "
"inlined function."
msgstr ""
