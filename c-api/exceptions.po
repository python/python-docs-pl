# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Exception Handling"
msgstr "Obsługa sytuacji wyjątkowych"

msgid ""
"The functions described in this chapter will let you handle and raise Python "
"exceptions.  It is important to understand some of the basics of Python "
"exception handling.  It works somewhat like the POSIX :c:data:`errno` "
"variable: there is a global indicator (per thread) of the last error that "
"occurred.  Most C API functions don't clear this on success, but will set it "
"to indicate the cause of the error on failure.  Most C API functions also "
"return an error indicator, usually ``NULL`` if they are supposed to return a "
"pointer, or ``-1`` if they return an integer (exception: the ``PyArg_*`` "
"functions return ``1`` for success and ``0`` for failure)."
msgstr ""

msgid ""
"Concretely, the error indicator consists of three object pointers: the "
"exception's type, the exception's value, and the traceback object.  Any of "
"those pointers can be ``NULL`` if non-set (although some combinations are "
"forbidden, for example you can't have a non-``NULL`` traceback if the "
"exception type is ``NULL``)."
msgstr ""

msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already "
"set it.  It is responsible for either handling the error and clearing the "
"exception or returning after cleaning up any resources it holds (such as "
"object references or memory allocations); it should *not* continue normally "
"if it is not prepared to handle the error.  If returning due to an error, it "
"is important to indicate to the caller that an error has been set.  If the "
"error is not handled or carefully propagated, additional calls into the "
"Python/C API may not behave as intended and may fail in mysterious ways."
msgstr ""
"Gdy zadanie musi zawieźć z powodu błędu zadania które wywołało, ogólnie nie "
"ustawia ona wskaźnika błędu; podzadanie które zostało wywołane już go "
"ustawiła. Jest on odpowiedzialny albo za obsługę błędu i wyczyszczenie "
"wskaźnika sytuacji wyjątkowej lub powrót po sprzątnięciu jakichkolwiek "
"zasobów które utrzymuje (takich jak odwołania do przedmiotów lub zajęte "
"pamięci); *nie* powinien kontynuować zwyczajnie jeśli nie jest przygotowany "
"do obsługi błędu. Jeśli kończy z powodu błędu, istotne jest zwrócenie uwagi "
"wołającego że został zgłoszony błąd. Jeśli błąd nie jest obsługiwany lub "
"propagowany właściwie, dodatkowe odwołania do sprzęgu języka pytonowskiego/C "
"mogą nie zachowywać się tak, jak planowano i mogą zawieźć w nieoczekiwane "
"sposoby."

msgid ""
"The error indicator is **not** the result of :func:`sys.exc_info()`. The "
"former corresponds to an exception that is not yet caught (and is therefore "
"still propagating), while the latter returns an exception after it is caught "
"(and has therefore stopped propagating)."
msgstr ""

msgid "Printing and clearing"
msgstr ""

msgid ""
"Clear the error indicator.  If the error indicator is not set, there is no "
"effect."
msgstr ""

msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error indicator. "
"**Unless** the error is a ``SystemExit``, in that case no traceback is "
"printed and the Python process will exit with the error code specified by "
"the ``SystemExit`` instance."
msgstr ""

msgid ""
"Call this function **only** when the error indicator is set.  Otherwise it "
"will cause a fatal error!"
msgstr ""

msgid ""
"If *set_sys_last_vars* is nonzero, the variables :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback` will be set to the "
"type, value and traceback of the printed exception, respectively."
msgstr ""

msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr ""

msgid ""
"Call :func:`sys.unraisablehook` using the current exception and *obj* "
"argument."
msgstr ""

msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to actually "
"raise the exception.  It is used, for example, when an exception occurs in "
"an :meth:`__del__` method."
msgstr ""

msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. If possible, the repr of "
"*obj* will be printed in the warning message."
msgstr ""

msgid "An exception must be set when calling this function."
msgstr ""

msgid "Raising exceptions"
msgstr ""

msgid ""
"These functions help you set the current thread's error indicator. For "
"convenience, some of these functions will always return a ``NULL`` pointer "
"for use in a ``return`` statement."
msgstr ""

msgid ""
"This is the most common way to set the error indicator.  The first argument "
"specifies the exception type; it is normally one of the standard exceptions, "
"e.g. :c:data:`PyExc_RuntimeError`.  You need not increment its reference "
"count. The second argument is an error message; it is decoded from "
"``'utf-8'``."
msgstr ""

msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you specify "
"an arbitrary Python object for the \"value\" of the exception."
msgstr ""

msgid ""
"This function sets the error indicator and returns ``NULL``.  *exception* "
"should be a Python exception class.  The *format* and subsequent parameters "
"help format the error message; they have the same meaning and values as in :"
"c:func:`PyUnicode_FromFormat`. *format* is an ASCII-encoded string."
msgstr ""

msgid ""
"Same as :c:func:`PyErr_Format`, but taking a :c:type:`va_list` argument "
"rather than a variable number of arguments."
msgstr ""

msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr ""

msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, where "
"*message* indicates that a built-in operation was invoked with an illegal "
"argument.  It is mostly for internal use."
msgstr ""

msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"``NULL`` so an object allocation function can write ``return "
"PyErr_NoMemory();`` when it runs out of memory."
msgstr ""

msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  It "
"constructs a tuple object whose first item is the integer :c:data:`errno` "
"value and whose second item is the corresponding error message (gotten from :"
"c:func:`strerror`), and then calls ``PyErr_SetObject(type, object)``.  On "
"Unix, when the :c:data:`errno` value is :const:`EINTR`, indicating an "
"interrupted system call, this calls :c:func:`PyErr_CheckSignals`, and if "
"that set the error indicator, leaves it set to that.  The function always "
"returns ``NULL``, so a wrapper function around a system call can write "
"``return PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior that "
"if *filenameObject* is not ``NULL``, it is passed to the constructor of "
"*type* as a third parameter.  In the case of :exc:`OSError` exception, this "
"is used to define the :attr:`filename` attribute of the exception instance."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but takes a "
"second filename object, for raising errors when a function that takes two "
"filenames fails."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but the filename "
"is given as a C string.  *filename* is decoded from the :term:`filesystem "
"encoding and error handler`."
msgstr ""

msgid ""
"This is a convenience function to raise :exc:`WindowsError`. If called with "
"*ierr* of ``0``, the error code returned by a call to :c:func:`GetLastError` "
"is used instead.  It calls the Win32 function :c:func:`FormatMessage` to "
"retrieve the Windows description of error code given by *ierr* or :c:func:"
"`GetLastError`, then it constructs a tuple object whose first item is the "
"*ierr* value and whose second item is the corresponding error message "
"(gotten from :c:func:`FormatMessage`), and then calls "
"``PyErr_SetObject(PyExc_WindowsError, object)``. This function always "
"returns ``NULL``."
msgstr ""

msgid ":ref:`Availability <availability>`: Windows."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional parameter "
"specifying the exception type to be raised."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, but the "
"filename is given as a C string.  *filename* is decoded from the filesystem "
"encoding (:func:`os.fsdecode`)."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, with an "
"additional parameter specifying the exception type to be raised."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetExcFromWindowsErrWithFilenameObject`, but "
"accepts a second filename object."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an additional "
"parameter specifying the exception type to be raised."
msgstr ""

msgid ""
"This is a convenience function to raise :exc:`ImportError`. *msg* will be "
"set as the exception's message string. *name* and *path*, both of which can "
"be ``NULL``, will be set as the :exc:`ImportError`'s respective ``name`` and "
"``path`` attributes."
msgstr ""

msgid ""
"Much like :c:func:`PyErr_SetImportError` but this function allows for "
"specifying a subclass of :exc:`ImportError` to raise."
msgstr ""

msgid ""
"Set file, line, and offset information for the current exception.  If the "
"current exception is not a :exc:`SyntaxError`, then it sets additional "
"attributes, which make the exception printing subsystem think the exception "
"is a :exc:`SyntaxError`."
msgstr ""

msgid ""
"Like :c:func:`PyErr_SyntaxLocationObject`, but *filename* is a byte string "
"decoded from the :term:`filesystem encoding and error handler`."
msgstr ""

msgid ""
"Like :c:func:`PyErr_SyntaxLocationEx`, but the *col_offset* parameter is "
"omitted."
msgstr ""

msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API "
"function) was invoked with an illegal argument.  It is mostly for internal "
"use."
msgstr ""

msgid "Issuing warnings"
msgstr ""

msgid ""
"Use these functions to issue warnings from C code.  They mirror similar "
"functions exported by the Python :mod:`warnings` module.  They normally "
"print a warning message to *sys.stderr*; however, it is also possible that "
"the user has specified that warnings are to be turned into errors, and in "
"that case they will raise an exception.  It is also possible that the "
"functions raise an exception because of a problem with the warning "
"machinery. The return value is ``0`` if no exception is raised, or ``-1`` if "
"an exception is raised.  (It is not possible to determine whether a warning "
"message is actually printed, nor what the reason is for the exception; this "
"is intentional.)  If an exception is raised, the caller should do its normal "
"exception handling (for example, :c:func:`Py_DECREF` owned references and "
"return an error value)."
msgstr ""

msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or ``NULL``; the *message* argument is a UTF-8 encoded string.  "
"*stack_level* is a positive number giving a number of stack frames; the "
"warning will be issued from the  currently executing line of code in that "
"stack frame.  A *stack_level* of 1 is the function calling :c:func:"
"`PyErr_WarnEx`, 2 is  the function above that, and so forth."
msgstr ""

msgid ""
"Warning categories must be subclasses of :c:data:`PyExc_Warning`; :c:data:"
"`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the default "
"warning category is :c:data:`PyExc_RuntimeWarning`. The standard Python "
"warning categories are available as global variables whose names are "
"enumerated at :ref:`standardwarningcategories`."
msgstr ""

msgid ""
"For information about warning control, see the documentation for the :mod:"
"`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""

msgid ""
"Issue a warning message with explicit control over all warning attributes.  "
"This is a straightforward wrapper around the Python function :func:`warnings."
"warn_explicit`; see there for more information.  The *module* and *registry* "
"arguments may be set to ``NULL`` to get the default effect described there."
msgstr ""

msgid ""
"Similar to :c:func:`PyErr_WarnExplicitObject` except that *message* and "
"*module* are UTF-8 encoded strings, and *filename* is decoded from the :term:"
"`filesystem encoding and error handler`."
msgstr ""

msgid ""
"Function similar to :c:func:`PyErr_WarnEx`, but use :c:func:"
"`PyUnicode_FromFormat` to format the warning message.  *format* is an ASCII-"
"encoded string."
msgstr ""

msgid ""
"Function similar to :c:func:`PyErr_WarnFormat`, but *category* is :exc:"
"`ResourceWarning` and it passes *source* to :func:`warnings.WarningMessage`."
msgstr ""

msgid "Querying the error indicator"
msgstr ""

msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the ``PyErr_Set*`` "
"functions or to :c:func:`PyErr_Restore`).  If not set, return ``NULL``.  You "
"do not own a reference to the return value, so you do not need to :c:func:"
"`Py_DECREF` it."
msgstr ""

msgid "The caller must hold the GIL."
msgstr ""

msgid ""
"Do not compare the return value to a specific exception; use :c:func:"
"`PyErr_ExceptionMatches` instead, shown below.  (The comparison could easily "
"fail since the exception may be an instance instead of a class, in the case "
"of a class exception, or it may be a subclass of the expected exception.)"
msgstr ""

msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  This "
"should only be called when an exception is actually set; a memory access "
"violation will occur if no exception has been raised."
msgstr ""

msgid ""
"Return true if the *given* exception matches the exception type in *exc*.  "
"If *exc* is a class object, this also returns true when *given* is an "
"instance of a subclass.  If *exc* is a tuple, all exception types in the "
"tuple (and recursively in subtuples) are searched for a match."
msgstr ""

msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"``NULL``.  If it is set, it will be cleared and you own a reference to each "
"object retrieved.  The value and traceback object may be ``NULL`` even when "
"the type object is not."
msgstr ""

msgid ""
"This function is normally only used by code that needs to catch exceptions "
"or by code that needs to save and restore the error indicator temporarily, e."
"g.::"
msgstr ""

msgid ""
"Set  the error indicator from the three objects.  If the error indicator is "
"already set, it is cleared first.  If the objects are ``NULL``, the error "
"indicator is cleared.  Do not pass a ``NULL`` type and non-``NULL`` value or "
"traceback.  The exception type should be a class.  Do not pass an invalid "
"exception type or value. (Violating these rules will cause subtle problems "
"later.)  This call takes away a reference to each object: you must own a "
"reference to each object before the call and after the call you no longer "
"own these references.  (If you don't understand this, don't use this "
"function.  I warned you.)"
msgstr ""

msgid ""
"This function is normally only used by code that needs to save and restore "
"the error indicator temporarily.  Use :c:func:`PyErr_Fetch` to save the "
"current error indicator."
msgstr ""

msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch` "
"below can be \"unnormalized\", meaning that ``*exc`` is a class object but "
"``*val`` is not an instance of the  same class.  This function can be used "
"to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""

msgid ""
"This function *does not* implicitly set the ``__traceback__`` attribute on "
"the exception value. If setting the traceback appropriately is desired, the "
"following additional snippet is needed::"
msgstr ""

msgid ""
"Retrieve the active exception instance, as would be returned by :func:`sys."
"exception`. This refers to an exception that was *already caught*, not to an "
"exception that was freshly raised. Returns a new reference to the exception "
"or ``NULL``. Does not modify the interpreter's exception state."
msgstr ""

msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_SetHandledException` to restore or "
"clear the exception state."
msgstr ""

msgid ""
"Set the active exception, as known from ``sys.exception()``.  This refers to "
"an exception that was *already caught*, not to an exception that was freshly "
"raised. To clear the exception state, pass ``NULL``."
msgstr ""

msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_GetHandledException` to get the "
"exception state."
msgstr ""

msgid ""
"Retrieve the old-style representation of the exception info, as known from :"
"func:`sys.exc_info`.  This refers to an exception that was *already caught*, "
"not to an exception that was freshly raised.  Returns new references for the "
"three objects, any of which may be ``NULL``.  Does not modify the exception "
"info state.  This function is kept for backwards compatibility. Prefer "
"using :c:func:`PyErr_GetHandledException`."
msgstr ""

msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_SetExcInfo` to restore or clear the "
"exception state."
msgstr ""

msgid ""
"Set the exception info, as known from ``sys.exc_info()``.  This refers to an "
"exception that was *already caught*, not to an exception that was freshly "
"raised.  This function steals the references of the arguments. To clear the "
"exception state, pass ``NULL`` for all three arguments. This function is "
"kept for backwards compatibility. Prefer using :c:func:"
"`PyErr_SetHandledException`."
msgstr ""

msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_GetExcInfo` to read the exception "
"state."
msgstr ""

msgid ""
"The ``type`` and ``traceback`` arguments are no longer used and can be NULL. "
"The interpreter now derives them from the exception instance (the ``value`` "
"argument). The function still steals references of all three arguments."
msgstr ""

msgid "Signal Handling"
msgstr ""

msgid "This function interacts with Python's signal handling."
msgstr ""

msgid ""
"If the function is called from the main thread and under the main Python "
"interpreter, it checks whether a signal has been sent to the processes and "
"if so, invokes the corresponding signal handler.  If the :mod:`signal` "
"module is supported, this can invoke a signal handler written in Python."
msgstr ""

msgid ""
"The function attempts to handle all pending signals, and then returns ``0``. "
"However, if a Python signal handler raises an exception, the error indicator "
"is set and the function returns ``-1`` immediately (such that other pending "
"signals may not have been handled yet: they will be on the next :c:func:"
"`PyErr_CheckSignals()` invocation)."
msgstr ""

msgid ""
"If the function is called from a non-main thread, or under a non-main Python "
"interpreter, it does nothing and returns ``0``."
msgstr ""

msgid ""
"This function can be called by long-running C code that wants to be "
"interruptible by user requests (such as by pressing Ctrl-C)."
msgstr ""

msgid ""
"The default Python signal handler for :const:`SIGINT` raises the :exc:"
"`KeyboardInterrupt` exception."
msgstr ""

msgid ""
"Simulate the effect of a :const:`SIGINT` signal arriving. This is equivalent "
"to ``PyErr_SetInterruptEx(SIGINT)``."
msgstr ""

msgid ""
"This function is async-signal-safe.  It can be called without the :term:"
"`GIL` and from a C signal handler."
msgstr ""

msgid ""
"Simulate the effect of a signal arriving. The next time :c:func:"
"`PyErr_CheckSignals` is called,  the Python signal handler for the given "
"signal number will be called."
msgstr ""

msgid ""
"This function can be called by C code that sets up its own signal handling "
"and wants Python signal handlers to be invoked as expected when an "
"interruption is requested (for example when the user presses Ctrl-C to "
"interrupt an operation)."
msgstr ""

msgid ""
"If the given signal isn't handled by Python (it was set to :data:`signal."
"SIG_DFL` or :data:`signal.SIG_IGN`), it will be ignored."
msgstr ""

msgid ""
"If *signum* is outside of the allowed range of signal numbers, ``-1`` is "
"returned.  Otherwise, ``0`` is returned.  The error indicator is never "
"changed by this function."
msgstr ""

msgid ""
"This utility function specifies a file descriptor to which the signal number "
"is written as a single byte whenever a signal is received. *fd* must be non-"
"blocking. It returns the previous such file descriptor."
msgstr ""

msgid ""
"The value ``-1`` disables the feature; this is the initial state. This is "
"equivalent to :func:`signal.set_wakeup_fd` in Python, but without any error "
"checking.  *fd* should be a valid file descriptor.  The function should only "
"be called from the main thread."
msgstr ""

msgid "On Windows, the function now also supports socket handles."
msgstr ""

msgid "Exception Classes"
msgstr ""

msgid ""
"This utility function creates and returns a new exception class. The *name* "
"argument must be the name of the new exception, a C string of the form "
"``module.classname``.  The *base* and *dict* arguments are normally "
"``NULL``. This creates a class object derived from :exc:`Exception` "
"(accessible in C as :c:data:`PyExc_Exception`)."
msgstr ""

msgid ""
"The :attr:`__module__` attribute of the new class is set to the first part "
"(up to the last dot) of the *name* argument, and the class name is set to "
"the last part (after the last dot).  The *base* argument can be used to "
"specify alternate base classes; it can either be only one class or a tuple "
"of classes. The *dict* argument can be used to specify a dictionary of class "
"variables and methods."
msgstr ""

msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class "
"can easily be given a docstring: If *doc* is non-``NULL``, it will be used "
"as the docstring for the exception class."
msgstr ""

msgid "Exception Objects"
msgstr "Przedmioty Sytuacji Wyjątkowych"

msgid ""
"Return the traceback associated with the exception as a new reference, as "
"accessible from Python through :attr:`__traceback__`.  If there is no "
"traceback associated, this returns ``NULL``."
msgstr ""

msgid ""
"Set the traceback associated with the exception to *tb*.  Use ``Py_None`` to "
"clear it."
msgstr ""

msgid ""
"Return the context (another exception instance during whose handling *ex* "
"was raised) associated with the exception as a new reference, as accessible "
"from Python through :attr:`__context__`.  If there is no context associated, "
"this returns ``NULL``."
msgstr ""

msgid ""
"Set the context associated with the exception to *ctx*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *ctx* is an exception "
"instance. This steals a reference to *ctx*."
msgstr ""

msgid ""
"Return the cause (either an exception instance, or :const:`None`, set by "
"``raise ... from ...``) associated with the exception as a new reference, as "
"accessible from Python through :attr:`__cause__`."
msgstr ""

msgid ""
"Set the cause associated with the exception to *cause*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *cause* is either an "
"exception instance or :const:`None`.  This steals a reference to *cause*."
msgstr ""

msgid ""
":attr:`__suppress_context__` is implicitly set to ``True`` by this function."
msgstr ""

msgid "Unicode Exception Objects"
msgstr ""

msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""

msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*. *encoding* and *reason* are "
"UTF-8 encoded strings."
msgstr ""

msgid "Return the *encoding* attribute of the given exception object."
msgstr ""

msgid "Return the *object* attribute of the given exception object."
msgstr ""

msgid ""
"Get the *start* attribute of the given exception object and place it into "
"*\\*start*.  *start* must not be ``NULL``.  Return ``0`` on success, ``-1`` "
"on failure."
msgstr ""

msgid ""
"Set the *start* attribute of the given exception object to *start*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

msgid ""
"Get the *end* attribute of the given exception object and place it into "
"*\\*end*.  *end* must not be ``NULL``.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""

msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""

msgid "Return the *reason* attribute of the given exception object."
msgstr ""

msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""

msgid "Recursion Control"
msgstr "Kontrola Rekursji"

msgid ""
"These two functions provide a way to perform safe recursive calls at the C "
"level, both in the core and in extension modules.  They are needed if the "
"recursive code does not necessarily invoke Python code (which tracks its "
"recursion depth automatically). They are also not needed for *tp_call* "
"implementations because the :ref:`call protocol <call>` takes care of "
"recursion handling."
msgstr ""

msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr ""

msgid ""
"If :const:`USE_STACKCHECK` is defined, this function checks if the OS stack "
"overflowed using :c:func:`PyOS_CheckStack`.  In this is the case, it sets a :"
"exc:`MemoryError` and returns a nonzero value."
msgstr ""

msgid ""
"The function then checks if the recursion limit is reached.  If this is the "
"case, a :exc:`RecursionError` is set and a nonzero value is returned. "
"Otherwise, zero is returned."
msgstr ""

msgid ""
"*where* should be a UTF-8 encoded string such as ``\" in instance check\"`` "
"to be concatenated to the :exc:`RecursionError` message caused by the "
"recursion depth limit."
msgstr ""

msgid "This function is now also available in the limited API."
msgstr ""

msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""

msgid ""
"Properly implementing :c:member:`~PyTypeObject.tp_repr` for container types "
"requires special recursion handling.  In addition to protecting the stack, :"
"c:member:`~PyTypeObject.tp_repr` also needs to track objects to prevent "
"cycles.  The following two functions facilitate this functionality.  "
"Effectively, these are the C equivalent to :func:`reprlib.recursive_repr`."
msgstr ""

msgid ""
"Called at the beginning of the :c:member:`~PyTypeObject.tp_repr` "
"implementation to detect cycles."
msgstr ""

msgid ""
"If the object has already been processed, the function returns a positive "
"integer.  In that case the :c:member:`~PyTypeObject.tp_repr` implementation "
"should return a string object indicating a cycle.  As examples, :class:"
"`dict` objects return ``{...}`` and :class:`list` objects return ``[...]``."
msgstr ""

msgid ""
"The function will return a negative integer if the recursion limit is "
"reached.  In that case the :c:member:`~PyTypeObject.tp_repr` implementation "
"should typically return ``NULL``."
msgstr ""

msgid ""
"Otherwise, the function returns zero and the :c:member:`~PyTypeObject."
"tp_repr` implementation can continue normally."
msgstr ""

msgid ""
"Ends a :c:func:`Py_ReprEnter`.  Must be called once for each invocation of :"
"c:func:`Py_ReprEnter` that returns zero."
msgstr ""

msgid "Standard Exceptions"
msgstr "Sztandarowe Sytuacje Wyjątkowe"

msgid ""
"All standard Python exceptions are available as global variables whose names "
"are ``PyExc_`` followed by the Python exception name.  These have the type :"
"c:expr:`PyObject*`; they are all class objects.  For completeness, here are "
"all the variables:"
msgstr ""

msgid "C Name"
msgstr "Nazwa C"

msgid "Python Name"
msgstr "Nazwa w języku pytonowskim"

msgid "Notes"
msgstr "Notatki"

msgid ":c:data:`PyExc_BaseException`"
msgstr ""

msgid ":exc:`BaseException`"
msgstr ":exc:`BaseException`"

msgid "[1]_"
msgstr ""

msgid ":c:data:`PyExc_Exception`"
msgstr ""

msgid ":exc:`Exception`"
msgstr ":exc:`Exception`"

msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ""

msgid ":exc:`ArithmeticError`"
msgstr ":exc:`ArithmeticError`"

msgid ":c:data:`PyExc_AssertionError`"
msgstr ""

msgid ":exc:`AssertionError`"
msgstr ":exc:`AssertionError`"

msgid ":c:data:`PyExc_AttributeError`"
msgstr ""

msgid ":exc:`AttributeError`"
msgstr ":exc:`AttributeError`"

msgid ":c:data:`PyExc_BlockingIOError`"
msgstr ""

msgid ":exc:`BlockingIOError`"
msgstr ""

msgid ":c:data:`PyExc_BrokenPipeError`"
msgstr ""

msgid ":exc:`BrokenPipeError`"
msgstr ""

msgid ":c:data:`PyExc_BufferError`"
msgstr ""

msgid ":exc:`BufferError`"
msgstr ""

msgid ":c:data:`PyExc_ChildProcessError`"
msgstr ""

msgid ":exc:`ChildProcessError`"
msgstr ""

msgid ":c:data:`PyExc_ConnectionAbortedError`"
msgstr ""

msgid ":exc:`ConnectionAbortedError`"
msgstr ""

msgid ":c:data:`PyExc_ConnectionError`"
msgstr ""

msgid ":exc:`ConnectionError`"
msgstr ""

msgid ":c:data:`PyExc_ConnectionRefusedError`"
msgstr ""

msgid ":exc:`ConnectionRefusedError`"
msgstr ""

msgid ":c:data:`PyExc_ConnectionResetError`"
msgstr ""

msgid ":exc:`ConnectionResetError`"
msgstr ""

msgid ":c:data:`PyExc_EOFError`"
msgstr ""

msgid ":exc:`EOFError`"
msgstr ":exc:`EOFError`"

msgid ":c:data:`PyExc_FileExistsError`"
msgstr ""

msgid ":exc:`FileExistsError`"
msgstr ""

msgid ":c:data:`PyExc_FileNotFoundError`"
msgstr ""

msgid ":exc:`FileNotFoundError`"
msgstr ""

msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ""

msgid ":exc:`FloatingPointError`"
msgstr ":exc:`FloatingPointError`"

msgid ":c:data:`PyExc_GeneratorExit`"
msgstr ""

msgid ":exc:`GeneratorExit`"
msgstr ""

msgid ":c:data:`PyExc_ImportError`"
msgstr ""

msgid ":exc:`ImportError`"
msgstr ":exc:`ImportError`"

msgid ":c:data:`PyExc_IndentationError`"
msgstr ""

msgid ":exc:`IndentationError`"
msgstr ""

msgid ":c:data:`PyExc_IndexError`"
msgstr ""

msgid ":exc:`IndexError`"
msgstr ":exc:`IndexError`"

msgid ":c:data:`PyExc_InterruptedError`"
msgstr ""

msgid ":exc:`InterruptedError`"
msgstr ""

msgid ":c:data:`PyExc_IsADirectoryError`"
msgstr ""

msgid ":exc:`IsADirectoryError`"
msgstr ""

msgid ":c:data:`PyExc_KeyError`"
msgstr ""

msgid ":exc:`KeyError`"
msgstr ":exc:`KeyError`"

msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ""

msgid ":exc:`KeyboardInterrupt`"
msgstr ":exc:`KeyboardInterrupt`"

msgid ":c:data:`PyExc_LookupError`"
msgstr ""

msgid ":exc:`LookupError`"
msgstr ":exc:`LookupError`"

msgid ":c:data:`PyExc_MemoryError`"
msgstr ""

msgid ":exc:`MemoryError`"
msgstr ":exc:`MemoryError`"

msgid ":c:data:`PyExc_ModuleNotFoundError`"
msgstr ""

msgid ":exc:`ModuleNotFoundError`"
msgstr ""

msgid ":c:data:`PyExc_NameError`"
msgstr ""

msgid ":exc:`NameError`"
msgstr ":exc:`NameError`"

msgid ":c:data:`PyExc_NotADirectoryError`"
msgstr ""

msgid ":exc:`NotADirectoryError`"
msgstr ""

msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ""

msgid ":exc:`NotImplementedError`"
msgstr ":exc:`NotImplementedError`"

msgid ":c:data:`PyExc_OSError`"
msgstr ""

msgid ":exc:`OSError`"
msgstr ":exc:`OSError`"

msgid ":c:data:`PyExc_OverflowError`"
msgstr ""

msgid ":exc:`OverflowError`"
msgstr ":exc:`OverflowError`"

msgid ":c:data:`PyExc_PermissionError`"
msgstr ""

msgid ":exc:`PermissionError`"
msgstr ""

msgid ":c:data:`PyExc_ProcessLookupError`"
msgstr ""

msgid ":exc:`ProcessLookupError`"
msgstr ""

msgid ":c:data:`PyExc_RecursionError`"
msgstr ""

msgid ":exc:`RecursionError`"
msgstr ""

msgid ":c:data:`PyExc_ReferenceError`"
msgstr ""

msgid ":exc:`ReferenceError`"
msgstr ":exc:`ReferenceError`"

msgid ":c:data:`PyExc_RuntimeError`"
msgstr ""

msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

msgid ":c:data:`PyExc_StopAsyncIteration`"
msgstr ""

msgid ":exc:`StopAsyncIteration`"
msgstr ""

msgid ":c:data:`PyExc_StopIteration`"
msgstr ""

msgid ":exc:`StopIteration`"
msgstr ""

msgid ":c:data:`PyExc_SyntaxError`"
msgstr ""

msgid ":exc:`SyntaxError`"
msgstr ":exc:`SyntaxError`"

msgid ":c:data:`PyExc_SystemError`"
msgstr ""

msgid ":exc:`SystemError`"
msgstr ":exc:`SystemError`"

msgid ":c:data:`PyExc_SystemExit`"
msgstr ""

msgid ":exc:`SystemExit`"
msgstr ":exc:`SystemExit`"

msgid ":c:data:`PyExc_TabError`"
msgstr ""

msgid ":exc:`TabError`"
msgstr ""

msgid ":c:data:`PyExc_TimeoutError`"
msgstr ""

msgid ":exc:`TimeoutError`"
msgstr ""

msgid ":c:data:`PyExc_TypeError`"
msgstr ""

msgid ":exc:`TypeError`"
msgstr ":exc:`TypeError`"

msgid ":c:data:`PyExc_UnboundLocalError`"
msgstr ""

msgid ":exc:`UnboundLocalError`"
msgstr ""

msgid ":c:data:`PyExc_UnicodeDecodeError`"
msgstr ""

msgid ":exc:`UnicodeDecodeError`"
msgstr ""

msgid ":c:data:`PyExc_UnicodeEncodeError`"
msgstr ""

msgid ":exc:`UnicodeEncodeError`"
msgstr ""

msgid ":c:data:`PyExc_UnicodeError`"
msgstr ""

msgid ":exc:`UnicodeError`"
msgstr ""

msgid ":c:data:`PyExc_UnicodeTranslateError`"
msgstr ""

msgid ":exc:`UnicodeTranslateError`"
msgstr ""

msgid ":c:data:`PyExc_ValueError`"
msgstr ""

msgid ":exc:`ValueError`"
msgstr ":exc:`ValueError`"

msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ""

msgid ":exc:`ZeroDivisionError`"
msgstr ":exc:`ZeroDivisionError`"

msgid ""
":c:data:`PyExc_BlockingIOError`, :c:data:`PyExc_BrokenPipeError`, :c:data:"
"`PyExc_ChildProcessError`, :c:data:`PyExc_ConnectionError`, :c:data:"
"`PyExc_ConnectionAbortedError`, :c:data:`PyExc_ConnectionRefusedError`, :c:"
"data:`PyExc_ConnectionResetError`, :c:data:`PyExc_FileExistsError`, :c:data:"
"`PyExc_FileNotFoundError`, :c:data:`PyExc_InterruptedError`, :c:data:"
"`PyExc_IsADirectoryError`, :c:data:`PyExc_NotADirectoryError`, :c:data:"
"`PyExc_PermissionError`, :c:data:`PyExc_ProcessLookupError` and :c:data:"
"`PyExc_TimeoutError` were introduced following :pep:`3151`."
msgstr ""

msgid ":c:data:`PyExc_StopAsyncIteration` and :c:data:`PyExc_RecursionError`."
msgstr ""

msgid ":c:data:`PyExc_ModuleNotFoundError`."
msgstr ""

msgid "These are compatibility aliases to :c:data:`PyExc_OSError`:"
msgstr ""

msgid ":c:data:`PyExc_EnvironmentError`"
msgstr ""

msgid ":c:data:`PyExc_IOError`"
msgstr ""

msgid ":c:data:`PyExc_WindowsError`"
msgstr ""

msgid "[2]_"
msgstr ""

msgid "These aliases used to be separate exception types."
msgstr ""

msgid "Notes:"
msgstr "Uwagi:"

msgid "This is a base class for other standard exceptions."
msgstr ""
"To jest podstawowy rodzaj przedmiotu dla innych sztandarowych sytuacji "
"wyjątkowych."

msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""
"Zdefiniowane tylko w systemie Windows; Kod chroniony który używa tego przez "
"sprawdzenie czy makrodefinicja preprocesora ``MS_WINDOWS`` jest określona."

msgid "Standard Warning Categories"
msgstr ""

msgid ""
"All standard Python warning categories are available as global variables "
"whose names are ``PyExc_`` followed by the Python exception name. These have "
"the type :c:expr:`PyObject*`; they are all class objects. For completeness, "
"here are all the variables:"
msgstr ""

msgid ":c:data:`PyExc_Warning`"
msgstr ""

msgid ":exc:`Warning`"
msgstr ""

msgid "[3]_"
msgstr ""

msgid ":c:data:`PyExc_BytesWarning`"
msgstr ""

msgid ":exc:`BytesWarning`"
msgstr ""

msgid ":c:data:`PyExc_DeprecationWarning`"
msgstr ""

msgid ":exc:`DeprecationWarning`"
msgstr ""

msgid ":c:data:`PyExc_FutureWarning`"
msgstr ""

msgid ":exc:`FutureWarning`"
msgstr ""

msgid ":c:data:`PyExc_ImportWarning`"
msgstr ""

msgid ":exc:`ImportWarning`"
msgstr ""

msgid ":c:data:`PyExc_PendingDeprecationWarning`"
msgstr ""

msgid ":exc:`PendingDeprecationWarning`"
msgstr ""

msgid ":c:data:`PyExc_ResourceWarning`"
msgstr ""

msgid ":exc:`ResourceWarning`"
msgstr ""

msgid ":c:data:`PyExc_RuntimeWarning`"
msgstr ""

msgid ":exc:`RuntimeWarning`"
msgstr ""

msgid ":c:data:`PyExc_SyntaxWarning`"
msgstr ""

msgid ":exc:`SyntaxWarning`"
msgstr ""

msgid ":c:data:`PyExc_UnicodeWarning`"
msgstr ""

msgid ":exc:`UnicodeWarning`"
msgstr ""

msgid ":c:data:`PyExc_UserWarning`"
msgstr ""

msgid ":exc:`UserWarning`"
msgstr ""

msgid ":c:data:`PyExc_ResourceWarning`."
msgstr ""

msgid "This is a base class for other standard warning categories."
msgstr ""
