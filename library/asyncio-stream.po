# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-31 18:02+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Streams"
msgstr ""

msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr ""

msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""

msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

msgid "See also the `Examples`_ section below."
msgstr ""

msgid "Stream Functions"
msgstr ""

msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""

msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""

msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""

msgid ""
"The *sock* argument transfers ownership of the socket to the :class:"
"`StreamWriter` created. To close the socket, call its :meth:`~asyncio."
"StreamWriter.close` method."
msgstr ""

msgid "Added the *ssl_handshake_timeout* parameter."
msgstr ""

msgid "Added *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

msgid "Removed the *loop* parameter."
msgstr ""

msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

msgid "Start a socket server."
msgstr ""

msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""

msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""

msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""

msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

msgid "Unix Sockets"
msgstr ""

msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`"
msgstr ""

msgid "Start a Unix socket server."
msgstr ""

msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :term:`path-like object`."
msgstr ""

msgid "StreamReader"
msgstr ""

msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream. As an :term:`asynchronous iterable`, the object supports the :"
"keyword:`async for` statement."
msgstr ""

msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

msgid "Read up to *n* bytes from the stream."
msgstr ""

msgid ""
"If *n* is not provided or set to ``-1``, read until EOF, then return all "
"read :class:`bytes`. If EOF was received and the internal buffer is empty, "
"return an empty ``bytes`` object."
msgstr ""

msgid "If *n* is ``0``, return an empty ``bytes`` object immediately."
msgstr ""

msgid ""
"If *n* is positive, return at most *n* available ``bytes`` as soon as at "
"least 1 byte is available in the internal buffer. If EOF is received before "
"any byte is read, return an empty ``bytes`` object."
msgstr ""

msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""

msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

msgid "Read exactly *n* bytes."
msgstr ""

msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""

msgid "Read data from the stream until *separator* is found."
msgstr ""

msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""

msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""

msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

msgid "StreamWriter"
msgstr ""

msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""

msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

msgid "The method should be used along with the ``drain()`` method::"
msgstr ""

msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

msgid "The method closes the stream and the underlying socket."
msgstr ""

msgid ""
"The method should be used, though not mandatory, along with the "
"``wait_closed()`` method::"
msgstr ""

msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""

msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""

msgid "Return the underlying asyncio transport."
msgstr ""

msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""

msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""

msgid "Upgrade an existing stream-based connection to TLS."
msgstr ""

msgid "Parameters:"
msgstr ""

msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr ""

msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""

msgid ""
"*ssl_handshake_timeout* is the time in seconds to wait for the TLS handshake "
"to complete before aborting the connection.  ``60.0`` seconds if ``None`` "
"(default)."
msgstr ""

msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

msgid "Wait until the stream is closed."
msgstr ""

msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed, ensuring that all data has been flushed before e.g. exiting the "
"program."
msgstr ""

msgid "Examples"
msgstr "Przyk≈Çady"

msgid "TCP echo client using streams"
msgstr ""

msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""

msgid "TCP echo server using streams"
msgstr ""

msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""

msgid "Get HTTP headers"
msgstr ""

msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

msgid "Usage::"
msgstr ""

msgid "or with HTTPS::"
msgstr ""

msgid "Register an open socket to wait for data using streams"
msgstr ""

msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""

msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""

msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
