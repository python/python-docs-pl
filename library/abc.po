# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`abc` --- Abstract Base Classes"
msgstr ":mod:`abc` --- abstrakcyjne klasy bazowe"

msgid "**Source code:** :source:`Lib/abc.py`"
msgstr ""

msgid ""
"This module provides the infrastructure for defining :term:`abstract base "
"classes <abstract base class>` (ABCs) in Python, as outlined in :pep:`3119`; "
"see the PEP for why this was added to Python. (See also :pep:`3141` and the :"
"mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""

msgid ""
"The :mod:`collections` module has some concrete classes that derive from "
"ABCs; these can, of course, be further derived. In addition, the :mod:"
"`collections.abc` submodule has some ABCs that can be used to test whether a "
"class or instance provides a particular interface, for example, if it is :"
"term:`hashable` or if it is a mapping."
msgstr ""

msgid ""
"This module provides the metaclass :class:`ABCMeta` for defining ABCs and a "
"helper class :class:`ABC` to alternatively define ABCs through inheritance:"
msgstr ""

msgid ""
"A helper class that has :class:`ABCMeta` as its metaclass.  With this class, "
"an abstract base class can be created by simply deriving from :class:`ABC` "
"avoiding sometimes confusing metaclass usage, for example::"
msgstr ""

msgid ""
"Note that the type of :class:`ABC` is still :class:`ABCMeta`, therefore "
"inheriting from :class:`ABC` requires the usual precautions regarding "
"metaclass usage, as multiple inheritance may lead to metaclass conflicts. "
"One may also define an abstract base class by passing the metaclass keyword "
"and using :class:`ABCMeta` directly, for example::"
msgstr ""

msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr ""
"Pośrednie uogólnienie dla definiowania abstrakcyjnych uogólnień podstawowych "
"(w skr. z ang. - ABC - Abstract Base Class)."

msgid ""
"Use this metaclass to create an ABC.  An ABC can be subclassed directly, and "
"then acts as a mix-in class.  You can also register unrelated concrete "
"classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" "
"-- these and their descendants will be considered subclasses of the "
"registering ABC by the built-in :func:`issubclass` function, but the "
"registering ABC won't show up in their MRO (Method Resolution Order) nor "
"will method implementations defined by the registering ABC be callable (not "
"even via :func:`super`). [#]_"
msgstr ""
"Używaj tego uogólnienia pośredniego aby utworzyć abstrakcyjne uogólnienie "
"podstawowe (w skr. z ang. ABC). ABC może być wykorzystane do tworzenia "
"następnych uogólnień bezpośrednio, i wtedy działa jako uogólnienie "
"domieszki. Możesz także zarejestrować niezwiązane uogólnienia konkretne "
"(nawet wbudowane uogólnienia) i niezwiązane abstrakcyjne uogólnienia "
"podstawowe jako \"sztuczne podrzędne uogólnienia\" -- te uogólnienia i "
"pochodne po nich będą uznawane za podrzędne uogólnienia rejestrowanego "
"uogólnienia podstawowego abstrakcyjnego przez wbudowane zadanie :func:"
"`issubclass`, ale rejestrowanie abstrakcyjnego uogólnienia bazowego nie "
"pokaże się w ich sposobie rozwiązywania sposobów postępowania (w skr. MRO - "
"z ang. - Method Resolution Order) ani też wypełnienia sposobów postępowania "
"określone przez rejestrowanie abstrakcyjnych bazowych uogólnień nie będą "
"wywoływalne (nawet nie przez użycie :func:`super`). [#]_"

msgid ""
"Classes created with a metaclass of :class:`ABCMeta` have the following "
"method:"
msgstr ""
"Uogólnienia stworzone za pomocą pośredniego uogólnienia :class:`ABCMeta` "
"mają następujący sposób postępowania:"

msgid ""
"Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"Zarejestruj *podrzędne uogólnienie* jako \"wirtualne podrzędne uogólnienie\" "
"tego uogólnienia abstrakcyjnego podstawowego. Na przykład::"

msgid "Returns the registered subclass, to allow usage as a class decorator."
msgstr ""

msgid ""
"To detect calls to :meth:`register`, you can use the :func:`get_cache_token` "
"function."
msgstr ""

msgid "You can also override this method in an abstract base class:"
msgstr ""
"Możesz także obejść ten sposób postępowania w abstrakcyjnym bazowym "
"uogólnieniu:"

msgid "(Must be defined as a class method.)"
msgstr "(Musi być określona jako sposób postępowania uogólnienia.)"

msgid ""
"Check whether *subclass* is considered a subclass of this ABC.  This means "
"that you can customize the behavior of ``issubclass`` further without the "
"need to call :meth:`register` on every class you want to consider a subclass "
"of the ABC.  (This class method is called from the :meth:`__subclasscheck__` "
"method of the ABC.)"
msgstr ""
"Sprawdzi czy *podrzędne uogólnienie* jest uważane za podrzędne względem tego "
"abstrakcyjnego uogólnienia bazowego. To oznacza, że możesz dostosować "
"zachowanie ``issubclass``, dalej bez konieczności wzywania sposobu "
"postępowania :meth:`register` w każdym uogólnieniu które chcesz uważać za "
"podrzędne uogólnienie względem tego abstrakcyjnego uogólnienia podstawowego. "
"(Ten sposób postępowania uogólnienia jest wzywany ze sposobu postępowania :"
"meth:`__subclasscheck__` tego abstrakcyjnego uogólnienia podstawowego.)"

msgid ""
"This method should return ``True``, ``False`` or ``NotImplemented``.  If it "
"returns ``True``, the *subclass* is considered a subclass of this ABC. If it "
"returns ``False``, the *subclass* is not considered a subclass of this ABC, "
"even if it would normally be one.  If it returns ``NotImplemented``, the "
"subclass check is continued with the usual mechanism."
msgstr ""
"Ten sposób postępowania powinien zwrócić ``Prawdę`` - z ang. - ``True``, "
"``Fałsz`` - z ang. - ``False`` lub ``niewypełnione`` - z ang. - "
"``NotImplemented``. Jeśli zwraca ``True``, *podrzędne uogólnienie* jest "
"uważanie za podrzędne względem tego abstrakcyjnego uogólnienia podstawowego. "
"Jeśli zwraca ``Fałsz``, *podrzędne uogólnienie* nie jest uważane za "
"podrzędne względem tego abstrakcyjnego uogólnienia podstawowego, nawet jeśli "
"zwykle byłoby takim. Jeśli zwraca ``NotImplemented``, sprawdzenie "
"podrzędnego uogólnienia jest kontynuowane z typowym mechanizmem."

msgid ""
"For a demonstration of these concepts, look at this example ABC definition::"
msgstr ""
"Dla demonstracji tych pomysłów, popatrz na tę przykładową definicję "
"abstrakcyjnego uogólnienia podstawowego::"

msgid ""
"The ABC ``MyIterable`` defines the standard iterable method, :meth:"
"`~iterator.__iter__`, as an abstract method.  The implementation given here "
"can still be called from subclasses.  The :meth:`get_iterator` method is "
"also part of the ``MyIterable`` abstract base class, but it does not have to "
"be overridden in non-abstract derived classes."
msgstr ""

msgid ""
"The :meth:`__subclasshook__` class method defined here says that any class "
"that has an :meth:`~iterator.__iter__` method in its :attr:`~object."
"__dict__` (or in that of one of its base classes, accessed via the :attr:"
"`~class.__mro__` list) is considered a ``MyIterable`` too."
msgstr ""

msgid ""
"Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, "
"even though it does not define an :meth:`~iterator.__iter__` method (it uses "
"the old-style iterable protocol, defined in terms of :meth:`__len__` and :"
"meth:`__getitem__`).  Note that this will not make ``get_iterator`` "
"available as a method of ``Foo``, so it is provided separately."
msgstr ""

msgid "The :mod:`abc` module also provides the following decorator:"
msgstr ""

msgid "A decorator indicating abstract methods."
msgstr "Dekorator wskazujący abstrakcyjne sposoby postępowania."

msgid ""
"Using this decorator requires that the class's metaclass is :class:`ABCMeta` "
"or is derived from it.  A class that has a metaclass derived from :class:"
"`ABCMeta` cannot be instantiated unless all of its abstract methods and "
"properties are overridden.  The abstract methods can be called using any of "
"the normal 'super' call mechanisms.  :func:`abstractmethod` may be used to "
"declare abstract methods for properties and descriptors."
msgstr ""

msgid ""
"Dynamically adding abstract methods to a class, or attempting to modify the "
"abstraction status of a method or class once it is created, are only "
"supported using the :func:`update_abstractmethods` function.  The :func:"
"`abstractmethod` only affects subclasses derived using regular inheritance; "
"\"virtual subclasses\" registered with the ABC's :meth:`register` method are "
"not affected."
msgstr ""

msgid ""
"When :func:`abstractmethod` is applied in combination with other method "
"descriptors, it should be applied as the innermost decorator, as shown in "
"the following usage examples::"
msgstr ""

msgid ""
"In order to correctly interoperate with the abstract base class machinery, "
"the descriptor must identify itself as abstract using :attr:"
"`__isabstractmethod__`. In general, this attribute should be ``True`` if any "
"of the methods used to compose the descriptor are abstract. For example, "
"Python's built-in :class:`property` does the equivalent of::"
msgstr ""

msgid ""
"Unlike Java abstract methods, these abstract methods may have an "
"implementation. This implementation can be called via the :func:`super` "
"mechanism from the class that overrides it.  This could be useful as an end-"
"point for a super-call in a framework that uses cooperative multiple-"
"inheritance."
msgstr ""
"W przeciwieństwie do abstrakcyjnych sposobów postępowania Javy, te "
"abstrakcyjne sposoby postępowania mogą mieć swoje wypełnienie. To "
"wypełnienie może być wzywane przez mechanizm odwołań do zadania :func:"
"`super`, z uogólnienia które przesłania taki sposób postępowania. To może "
"być użyteczne jako punkt końcowy super-wywołania w ramach udogodnienia które "
"używa współpracującego wielokrotnego-dziedziczenia."

msgid "The :mod:`abc` module also supports the following legacy decorators:"
msgstr ""

msgid ""
"It is now possible to use :class:`classmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""

msgid ""
"A subclass of the built-in :func:`classmethod`, indicating an abstract "
"classmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""

msgid ""
"This special case is deprecated, as the :func:`classmethod` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""

msgid ""
"It is now possible to use :class:`staticmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""

msgid ""
"A subclass of the built-in :func:`staticmethod`, indicating an abstract "
"staticmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""

msgid ""
"This special case is deprecated, as the :func:`staticmethod` decorator is "
"now correctly identified as abstract when applied to an abstract method::"
msgstr ""

msgid ""
"It is now possible to use :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` and :meth:`property.deleter` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""

msgid ""
"A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr ""
"Podrzędne uogólnienie wbudowanego zadania :func:`property` wskazujące "
"abstrakcyjną właściwość."

msgid ""
"This special case is deprecated, as the :func:`property` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""

msgid ""
"The above example defines a read-only property; you can also define a read-"
"write abstract property by appropriately marking one or more of the "
"underlying methods as abstract::"
msgstr ""

msgid ""
"If only some components are abstract, only those components need to be "
"updated to create a concrete property in a subclass::"
msgstr ""

msgid "The :mod:`abc` module also provides the following functions:"
msgstr ""

msgid "Returns the current abstract base class cache token."
msgstr ""

msgid ""
"The token is an opaque object (that supports equality testing) identifying "
"the current version of the abstract base class cache for virtual subclasses. "
"The token changes with every call to :meth:`ABCMeta.register` on any ABC."
msgstr ""

msgid ""
"A function to recalculate an abstract class's abstraction status. This "
"function should be called if a class's abstract methods have been "
"implemented or changed after it was created. Usually, this function should "
"be called from within a class decorator."
msgstr ""

msgid "Returns *cls*, to allow usage as a class decorator."
msgstr ""

msgid "If *cls* is not an instance of :class:`ABCMeta`, does nothing."
msgstr ""

msgid ""
"This function assumes that *cls*'s superclasses are already updated. It does "
"not update any subclasses."
msgstr ""

msgid "Footnotes"
msgstr "Przypisy"

msgid ""
"C++ programmers should note that Python's virtual base class concept is not "
"the same as C++'s."
msgstr ""
"Programiści C++ powinni zauważyć, że koncepcja wirtualnego uogólnienia "
"podstawowego z języka pytonowskiego nie jest tożsame z tym z C++'a."
