# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
# Igor Zubrycki <igorzubrycki@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Igor Zubrycki <igorzubrycki@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid "Queues"
msgstr ""

msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr ""

msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""

msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""

msgid "See also the `Examples`_ section below."
msgstr ""

msgid "Queue"
msgstr ""

msgid "A first in, first out (FIFO) queue."
msgstr ""

msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""

msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""

msgid "Removed the *loop* parameter."
msgstr ""

msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

msgid "Number of items allowed in the queue."
msgstr ""

msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr ""

msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr ""

msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` never returns ``True``."
msgstr ""

msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""

msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""

msgid "Block until all items in the queue have been received and processed."
msgstr ""

msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""

msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""

msgid "Put an item into the queue without blocking."
msgstr ""

msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""

msgid "Return the number of items in the queue."
msgstr ""

msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""

msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

msgid "Priority Queue"
msgstr ""

msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""

msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr ""

msgid "LIFO Queue"
msgstr ""

msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""

msgid "Exceptions"
msgstr "Wyjątki"

msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""

msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""

msgid "Examples"
msgstr "Przykłady"

msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""
