# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
# Seweryn Piórkowski <seweryn.piorkowski@gmail.com>, 2021
# Michał Biliński <m.bilinskimichal@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Michał Biliński <m.bilinskimichal@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`datetime` --- Basic date and time types"
msgstr ""

msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr ""

msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times."
msgstr ""

msgid ""
"While date and time arithmetic is supported, the focus of the implementation "
"is on efficient attribute extraction for output formatting and manipulation."
msgstr ""

msgid "Module :mod:`calendar`"
msgstr ""

msgid "General calendar related functions."
msgstr ""

msgid "Module :mod:`time`"
msgstr ""

msgid "Time access and conversions."
msgstr ""

msgid "Module :mod:`zoneinfo`"
msgstr ""

msgid "Concrete time zones representing the IANA time zone database."
msgstr ""

msgid "Package `dateutil <https://dateutil.readthedocs.io/en/stable/>`_"
msgstr ""

msgid "Third-party library with expanded time zone and parsing support."
msgstr ""

msgid "Aware and Naive Objects"
msgstr ""

msgid ""
"Date and time objects may be categorized as \"aware\" or \"naive\" depending "
"on whether or not they include timezone information."
msgstr ""

msgid ""
"With sufficient knowledge of applicable algorithmic and political time "
"adjustments, such as time zone and daylight saving time information, an "
"**aware** object can locate itself relative to other aware objects. An aware "
"object represents a specific moment in time that is not open to "
"interpretation. [#]_"
msgstr ""

msgid ""
"A **naive** object does not contain enough information to unambiguously "
"locate itself relative to other date/time objects. Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass. Naive "
"objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""

msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether daylight saving time "
"is in effect."
msgstr ""

msgid ""
"Only one concrete :class:`tzinfo` class, the :class:`timezone` class, is "
"supplied by the :mod:`datetime` module. The :class:`timezone` class can "
"represent simple timezones with fixed offsets from UTC, such as UTC itself "
"or North American EST and EDT timezones. Supporting timezones at deeper "
"levels of detail is up to the application. The rules for time adjustment "
"across the world are more political than rational, change frequently, and "
"there is no standard suitable for every application aside from UTC."
msgstr ""

msgid "Constants"
msgstr "Stały"

msgid "The :mod:`datetime` module exports the following constants:"
msgstr ""

msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""

msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""

msgid "Alias for the UTC timezone singleton :attr:`datetime.timezone.utc`."
msgstr ""

msgid "Available Types"
msgstr ""

msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""

msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds.  (There is no notion of \"leap "
"seconds\" here.) Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :"
"attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""

msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""

msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""

msgid ""
"An abstract base class for time zone information objects. These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""

msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""

msgid "Objects of these types are immutable."
msgstr ""

msgid "Subclass relationships::"
msgstr ""

msgid "Common Properties"
msgstr ""

msgid ""
"The :class:`date`, :class:`.datetime`, :class:`.time`, and :class:`timezone` "
"types share these common features:"
msgstr ""

msgid ""
"Objects of these types are :term:`hashable`, meaning that they can be used "
"as dictionary keys."
msgstr ""

msgid ""
"Objects of these types support efficient pickling via the :mod:`pickle` "
"module."
msgstr ""

msgid "Determining if an Object is Aware or Naive"
msgstr ""

msgid "Objects of the :class:`date` type are always naive."
msgstr ""

msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be aware or naive."
msgstr ""

msgid "A :class:`.datetime` object *d* is aware if both of the following hold:"
msgstr ""

msgid "``d.tzinfo`` is not ``None``"
msgstr ""

msgid "``d.tzinfo.utcoffset(d)`` does not return ``None``"
msgstr ""

msgid "Otherwise, *d* is naive."
msgstr ""

msgid "A :class:`.time` object *t* is aware if both of the following hold:"
msgstr ""

msgid "``t.tzinfo`` is not ``None``"
msgstr ""

msgid "``t.tzinfo.utcoffset(None)`` does not return ``None``."
msgstr ""

msgid "Otherwise, *t* is naive."
msgstr ""

msgid ""
"The distinction between aware and naive doesn't apply to :class:`timedelta` "
"objects."
msgstr ""

msgid ":class:`timedelta` Objects"
msgstr ""

msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""

msgid ""
"All arguments are optional and default to ``0``. Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""

msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally. Arguments "
"are converted to those units:"
msgstr ""

msgid "A millisecond is converted to 1000 microseconds."
msgstr ""

msgid "A minute is converted to 60 seconds."
msgstr ""

msgid "An hour is converted to 3600 seconds."
msgstr ""

msgid "A week is converted to 7 days."
msgstr ""

msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""

msgid "``0 <= microseconds < 1000000``"
msgstr ""

msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

msgid "``-999999999 <= days <= 999999999``"
msgstr ""

msgid ""
"The following example illustrates how any arguments besides *days*, "
"*seconds* and *microseconds* are \"merged\" and normalized into those three "
"resulting attributes::"
msgstr ""

msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker. If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""

msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""

msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example::"
msgstr ""

msgid "Class attributes:"
msgstr ""

msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

msgid "Instance attributes (read-only):"
msgstr ""

msgid "Attribute"
msgstr ""

msgid "Value"
msgstr "Wartość"

msgid "``days``"
msgstr ""

msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

msgid "``seconds``"
msgstr ""

msgid "Between 0 and 86399 inclusive"
msgstr ""

msgid "``microseconds``"
msgstr ""

msgid "Between 0 and 999999 inclusive"
msgstr ""

msgid "Supported operations:"
msgstr ""

msgid "Operation"
msgstr ""

msgid "Result"
msgstr ""

msgid "``t1 = t2 + t3``"
msgstr ""

msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""

msgid "``t1 = t2 - t3``"
msgstr ""

msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)(6)"
msgstr ""

msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr ""

msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""

msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr ""

msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""

msgid "``f = t2 / t3``"
msgstr ""

msgid ""
"Division (3) of overall duration *t2* by interval unit *t3*. Returns a :"
"class:`float` object."
msgstr ""

msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr ""

msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""

msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr ""

msgid ""
"The floor is computed and the remainder (if any) is thrown away. In the "
"second case, an integer is returned. (3)"
msgstr ""

msgid "``t1 = t2 % t3``"
msgstr ""

msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr ""

msgid "``q, r = divmod(t1, t2)``"
msgstr ""

msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""

msgid "``+t1``"
msgstr ""

msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

msgid "``-t1``"
msgstr ""

msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

msgid "``abs(t)``"
msgstr ""

msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""

msgid "``str(t)``"
msgstr ""

msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

msgid "``repr(t)``"
msgstr ""

msgid ""
"Returns a string representation of the :class:`timedelta` object as a "
"constructor call with canonical attribute values."
msgstr ""

msgid "Notes:"
msgstr "Uwagi:"

msgid "This is exact but may overflow."
msgstr ""

msgid "This is exact and cannot overflow."
msgstr ""

msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation. This leads to somewhat unusual "
"results for negative timedeltas. For example::"
msgstr ""

msgid ""
"The expression ``t2 - t3`` will always be equal to the expression ``t2 + (-"
"t3)`` except when t3 is equal to ``timedelta.max``; in that case the former "
"will produce a result while the latter will overflow."
msgstr ""

msgid ""
"In addition to the operations listed above, :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""

msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function. True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""

msgid ""
"Comparisons of :class:`timedelta` objects are supported, with some caveats."
msgstr ""

msgid ""
"The comparisons ``==`` or ``!=`` *always* return a :class:`bool`, no matter "
"the type of the compared object::"
msgstr ""

msgid ""
"For all other comparisons (such as ``<`` and ``>``), when a :class:"
"`timedelta` object is compared to an object of a different type, :exc:"
"`TypeError` is raised::"
msgstr ""

msgid ""
"In Boolean contexts, a :class:`timedelta` object is considered to be true if "
"and only if it isn't equal to ``timedelta(0)``."
msgstr ""

msgid "Instance methods:"
msgstr ""

msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``. For interval units other than seconds, use "
"the division form directly (e.g. ``td / timedelta(microseconds=1)``)."
msgstr ""

msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""

msgid "Examples of usage: :class:`timedelta`"
msgstr ""

msgid "An additional example of normalization::"
msgstr ""

msgid "Examples of :class:`timedelta` arithmetic::"
msgstr ""

msgid ":class:`date` Objects"
msgstr ""

msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions."
msgstr ""

msgid ""
"January 1 of year 1 is called day number 1, January 2 of year 1 is called "
"day number 2, and so on. [#]_"
msgstr ""

msgid ""
"All arguments are required. Arguments must be integers, in the following "
"ranges:"
msgstr ""

msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr ""

msgid "``1 <= month <= 12``"
msgstr ""

msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

msgid "Other constructors, all class methods:"
msgstr ""

msgid "Return the current local date."
msgstr ""

msgid "This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr ""

msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`."
msgstr ""

msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`localtime` function, and :exc:"
"`OSError` on :c:func:`localtime` failure. It's common for this to be "
"restricted to years from 1970 through 2038. Note that on non-POSIX systems "
"that include leap seconds in their notion of a timestamp, leap seconds are "
"ignored by :meth:`fromtimestamp`."
msgstr ""

msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""

msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1."
msgstr ""

msgid ""
":exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. "
"For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

msgid ""
"Return a :class:`date` corresponding to a *date_string* given in any valid "
"ISO 8601 format, except ordinal dates (e.g. ``YYYY-DDD``)::"
msgstr ""

msgid "Previously, this method only supported the format ``YYYY-MM-DD``."
msgstr ""

msgid ""
"Return a :class:`date` corresponding to the ISO calendar date specified by "
"year, week and day. This is the inverse of the function :meth:`date."
"isocalendar`."
msgstr ""

msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""

msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

msgid "Between 1 and 12 inclusive."
msgstr ""

msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

msgid "``date2 = date1 + timedelta``"
msgstr ""

msgid "*date2* will be ``timedelta.days`` days after *date1*. (1)"
msgstr ""

msgid "``date2 = date1 - timedelta``"
msgstr ""

msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

msgid "``timedelta = date1 - date2``"
msgstr ""

msgid "\\(3)"
msgstr "\\(3)"

msgid "``date1 < date2``"
msgstr ""

msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""

msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``. Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

msgid ""
"This is exact, and cannot overflow. timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. Date comparison raises :exc:`TypeError` if the other "
"comparand isn't also a :class:`date` object. However, ``NotImplemented`` is "
"returned instead if the other comparand has a :meth:`timetuple` attribute. "
"This hook gives other kinds of date objects a chance at implementing mixed-"
"type comparison. If not, when a :class:`date` object is compared to an "
"object of a different type, :exc:`TypeError` is raised unless the comparison "
"is ``==`` or ``!=``. The latter cases return :const:`False` or :const:"
"`True`, respectively."
msgstr ""

msgid ""
"In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified."
msgstr ""

msgid "Example::"
msgstr ""

msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`."
msgstr ""

msgid "The hours, minutes and seconds are 0, and the DST flag is -1."
msgstr ""

msgid "``d.timetuple()`` is equivalent to::"
msgstr ""

msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st."
msgstr ""

msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1. For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""

msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""

msgid ""
"Return a :term:`named tuple` object with three components: ``year``, "
"``week`` and ``weekday``."
msgstr ""

msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. [#]_"
msgstr ""

msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday. The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004::"
msgstr ""

msgid "Result changed from a tuple to a :term:`named tuple`."
msgstr ""

msgid ""
"Return a string representing the date in ISO 8601 format, ``YYYY-MM-DD``::"
msgstr ""

msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

msgid "Return a string representing the date::"
msgstr ""

msgid "``d.ctime()`` is equivalent to::"
msgstr ""

msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to "
"the C standard."
msgstr ""

msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "Examples of Usage: :class:`date`"
msgstr ""

msgid "Example of counting days to an event::"
msgstr ""

msgid "More examples of working with :class:`date`:"
msgstr ""

msgid ":class:`.datetime` Objects"
msgstr ""

msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object."
msgstr ""

msgid ""
"Like a :class:`date` object, :class:`.datetime` assumes the current "
"Gregorian calendar extended in both directions; like a :class:`.time` "
"object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in "
"every day."
msgstr ""

msgid "Constructor:"
msgstr ""

msgid ""
"The *year*, *month* and *day* arguments are required. *tzinfo* may be "
"``None``, or an instance of a :class:`tzinfo` subclass. The remaining "
"arguments must be integers in the following ranges:"
msgstr ""

msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr ""

msgid "``1 <= month <= 12``,"
msgstr ""

msgid "``1 <= day <= number of days in the given month and year``,"
msgstr ""

msgid "``0 <= hour < 24``,"
msgstr ""

msgid "``0 <= minute < 60``,"
msgstr ""

msgid "``0 <= second < 60``,"
msgstr ""

msgid "``0 <= microsecond < 1000000``,"
msgstr ""

msgid "``fold in [0, 1]``."
msgstr ""

msgid "Added the ``fold`` argument."
msgstr ""

msgid "Return the current local datetime, with :attr:`.tzinfo` ``None``."
msgstr ""

msgid "Equivalent to::"
msgstr ""

msgid "See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ""

msgid ""
"This method is functionally equivalent to :meth:`now`, but without a ``tz`` "
"parameter."
msgstr ""

msgid "Return the current local date and time."
msgstr ""

msgid ""
"If optional argument *tz* is ``None`` or not specified, this is like :meth:"
"`today`, but, if possible, supplies more precision than can be gotten from "
"going through a :func:`time.time` timestamp (for example, this may be "
"possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""

msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone."
msgstr ""

msgid "This function is preferred over :meth:`today` and :meth:`utcnow`."
msgstr ""

msgid "Return the current UTC date and time, with :attr:`.tzinfo` ``None``."
msgstr ""

msgid ""
"This is like :meth:`now`, but returns the current UTC date and time, as a "
"naive :class:`.datetime` object. An aware current UTC datetime can be "
"obtained by calling ``datetime.now(timezone.utc)``. See also :meth:`now`."
msgstr ""

msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing the "
"current time in UTC is by calling ``datetime.now(timezone.utc)``."
msgstr ""

msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""

msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone."
msgstr ""

msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. This method is "
"preferred over :meth:`utcfromtimestamp`."
msgstr ""

msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""

msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""

msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``.  (The resulting object is naive.)"
msgstr ""

msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`gmtime` function, and :exc:"
"`OSError` on :c:func:`gmtime` failure. It's common for this to be restricted "
"to years in 1970 through 2038."
msgstr ""

msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""

msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr ""

msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing a "
"specific timestamp in UTC is by calling ``datetime.fromtimestamp(timestamp, "
"tz=timezone.utc)``."
msgstr ""

msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""

msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``. The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""

msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the "
"given :class:`.time` object's. If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""

msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"time(), d.tzinfo)``. If date is a :class:`.datetime` object, its time "
"components and :attr:`.tzinfo` attributes are ignored."
msgstr ""

msgid "Added the *tzinfo* argument."
msgstr ""

msgid ""
"Return a :class:`.datetime` corresponding to a *date_string* in any valid "
"ISO 8601 format, with the following exceptions:"
msgstr ""

msgid "Time zone offsets may have fractional seconds."
msgstr ""

msgid "The ``T`` separator may be replaced by any single unicode character."
msgstr ""

msgid "Ordinal dates are not currently supported."
msgstr ""

msgid "Fractional hours and minutes are not supported."
msgstr ""

msgid "Examples::"
msgstr ""

msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`date.isoformat()` or :meth:`datetime.isoformat()`."
msgstr ""

msgid ""
"Return a :class:`.datetime` corresponding to the ISO calendar date specified "
"by year, week and day. The non-date components of the datetime are populated "
"with their normal default values. This is the inverse of the function :meth:"
"`datetime.isocalendar`."
msgstr ""

msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*."
msgstr ""

msgid "This is equivalent to::"
msgstr ""

msgid ""
":exc:`ValueError` is raised if the date_string and format can't be parsed "
"by :func:`time.strptime` or if it returns a value which isn't a time tuple. "
"For a complete list of formatting directives, see :ref:`strftime-strptime-"
"behavior`."
msgstr ""

msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""

msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""

msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

msgid "In ``range(24)``."
msgstr ""

msgid "In ``range(60)``."
msgstr ""

msgid "In ``range(1000000)``."
msgstr ""

msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""

msgid ""
"In ``[0, 1]``. Used to disambiguate wall times during a repeated interval. "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The value 0 (1) represents the earlier "
"(later) of the two moments with the same wall time representation."
msgstr ""

msgid "``datetime2 = datetime1 + timedelta``"
msgstr ""

msgid "\\(1)"
msgstr "\\(1)"

msgid "``datetime2 = datetime1 - timedelta``"
msgstr ""

msgid "\\(2)"
msgstr "\\(2)"

msgid "``timedelta = datetime1 - datetime2``"
msgstr ""

msgid "``datetime1 < datetime2``"
msgstr ""

msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ""

msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0. "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""

msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware."
msgstr ""

msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware. If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""

msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``. No time zone adjustments are done in this case."
msgstr ""

msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first. The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""

msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted. For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

msgid ""
"If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` "
"attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the "
"base datetimes are compared. If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""

msgid ""
"Equality comparisons between aware and naive :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""

msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute. This hook gives other kinds of date objects a "
"chance at implementing mixed-type comparison. If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``. The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""

msgid "Return :class:`date` object with same year, month and day."
msgstr ""

msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and "
"fold. :attr:`.tzinfo` is ``None``. See also method :meth:`timetz`."
msgstr ""

msgid "The fold value is copied to the returned :class:`.time` object."
msgstr ""

msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes. See also method :meth:`time`."
msgstr ""

msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""

msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""

msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``. If "
"*self* is naive, it is presumed to represent time in the system timezone."
msgstr ""

msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed for the target timezone. The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""

msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the timezone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same "
"date and time data as ``dt - dt.utcoffset()``."
msgstr ""

msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``. If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

msgid "*tz* now can be omitted."
msgstr ""

msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None`` "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

msgid "The DST offset is not restricted to a whole number of minutes."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""

msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns. DST is never in effect for a UTC time."
msgstr ""

msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned. :attr:`tm_isdst` is forced to 0. Note that an :exc:`OverflowError` "
"may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment "
"spills over a year boundary."
msgstr ""

msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC; as a result, using :meth:`datetime.utctimetuple` may give misleading "
"results. If you have a naive ``datetime`` representing UTC, use ``datetime."
"replace(tzinfo=timezone.utc)`` to make it aware, at which point you can use :"
"meth:`.datetime.timetuple`."
msgstr ""

msgid ""
"Return the proleptic Gregorian ordinal of the date. The same as ``self."
"date().toordinal()``."
msgstr ""

msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance. The "
"return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""

msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion. Since :class:`.datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` for times far in the past or far in the future."
msgstr ""

msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""

msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ""

msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`.datetime` instance representing UTC time. If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

msgid "or by calculating the timestamp directly::"
msgstr ""

msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""

msgid ""
"Return a :term:`named tuple` with three components: ``year``, ``week`` and "
"``weekday``. The same as ``self.date().isocalendar()``."
msgstr ""

msgid "Return a string representing the date and time in ISO 8601 format:"
msgstr ""

msgid "``YYYY-MM-DDTHH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ""

msgid "``YYYY-MM-DDTHH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ""

msgid ""
"If :meth:`utcoffset` does not return ``None``, a string is appended, giving "
"the UTC offset:"
msgstr ""

msgid ""
"``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` "
"is not 0"
msgstr ""

msgid ""
"``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``,  if :attr:`microsecond` is 0"
msgstr ""

msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result. For example::"
msgstr ""

msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one "
"of the following:"
msgstr ""

msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""

msgid "``'hours'``: Include the :attr:`hour` in the two-digit ``HH`` format."
msgstr ""

msgid ""
"``'minutes'``: Include :attr:`hour` and :attr:`minute` in ``HH:MM`` format."
msgstr ""

msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"``HH:MM:SS`` format."
msgstr ""

msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. ``HH:MM:SS.sss`` format."
msgstr ""

msgid "``'microseconds'``: Include full time in ``HH:MM:SS.ffffff`` format."
msgstr ""

msgid "Excluded time components are truncated, not rounded."
msgstr ""

msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument::"
msgstr ""

msgid "Added the *timespec* argument."
msgstr ""

msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""

msgid "Return a string representing the date and time::"
msgstr ""

msgid ""
"The output string will *not* include time zone information, regardless of "
"whether the input is aware or naive."
msgstr ""

msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms "
"to the C standard."
msgstr ""

msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string. For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""

msgid ""
"Same as :meth:`.datetime.strftime`. This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`. For a complete list "
"of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "Examples of Usage: :class:`.datetime`"
msgstr ""

msgid "Examples of working with :class:`~datetime.datetime` objects:"
msgstr ""

msgid ""
"The example below defines a :class:`tzinfo` subclass capturing time zone "
"information for Kabul, Afghanistan, which used +4 UTC until 1945 and then "
"+4:30 UTC thereafter::"
msgstr ""

msgid "Usage of ``KabulTz`` from above::"
msgstr ""

msgid ":class:`.time` Objects"
msgstr ""

msgid ""
"A :class:`time` object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

msgid ""
"All arguments are optional. *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass. The remaining arguments must be integers in the "
"following ranges:"
msgstr ""

msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised. "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr ""

msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""

msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""

msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""

msgid ""
":class:`.time` objects support comparison of :class:`.time` to :class:`."
"time`, where *a* is considered less than *b* when *a* precedes *b* in time. "
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted. For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

msgid ""
"If both comparands are aware, and have the same :attr:`~time.tzinfo` "
"attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base "
"times are compared. If both comparands are aware and have different :attr:"
"`~time.tzinfo` attributes, the comparands are first adjusted by subtracting "
"their UTC offsets (obtained from ``self.utcoffset()``). In order to stop "
"mixed-type comparisons from falling back to the default comparison by object "
"address, when a :class:`.time` object is compared to an object of a "
"different type, :exc:`TypeError` is raised unless the comparison is ``==`` "
"or ``!=``. The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""

msgid ""
"Equality comparisons between aware and naive :class:`~datetime.time` "
"instances don't raise :exc:`TypeError`."
msgstr ""

msgid ""
"In Boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""

msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC. This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5. See :issue:`13936` for full "
"details."
msgstr ""

msgid "Other constructor:"
msgstr ""

msgid ""
"Return a :class:`.time` corresponding to a *time_string* in any valid ISO "
"8601 format, with the following exceptions:"
msgstr ""

msgid ""
"The leading ``T``, normally required in cases where there may be ambiguity "
"between a date and a time, is not required."
msgstr ""

msgid ""
"Fractional seconds may have any number of digits (anything beyond 6 will be "
"truncated)."
msgstr ""

msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`time.isoformat()`."
msgstr ""

msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""

msgid "Return a string representing the time in ISO 8601 format, one of:"
msgstr ""

msgid "``HH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ""

msgid "``HH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ""

msgid ""
"``HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :meth:`utcoffset` does not "
"return ``None``"
msgstr ""

msgid ""
"``HH:MM:SS+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` is 0 and :meth:"
"`utcoffset` does not return ``None``"
msgstr ""

msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr ""

msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

msgid ""
"Return a string representing the time, controlled by an explicit format "
"string. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""

msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""

msgid "Examples of Usage: :class:`.time`"
msgstr ""

msgid "Examples of working with a :class:`.time` object::"
msgstr ""

msgid ":class:`tzinfo` Objects"
msgstr ""

msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  Define a subclass of :class:`tzinfo` to capture "
"information about a particular time zone."
msgstr ""

msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""

msgid ""
"You need to derive a concrete subclass, and (at least) supply "
"implementations of the standard :class:`tzinfo` methods needed by the :class:"
"`.datetime` methods you use. The :mod:`datetime` module provides :class:"
"`timezone`, a simple concrete subclass of :class:`tzinfo` which can "
"represent timezones with fixed offset from UTC such as UTC itself or North "
"American EST and EDT."
msgstr ""

msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, otherwise it "
"can be pickled but possibly not unpickled again. This is a technical "
"requirement that may be relaxed in the future."
msgstr ""

msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods. Exactly which methods are needed depends on the uses made of aware :"
"mod:`datetime` objects. If in doubt, simply implement all of them."
msgstr ""

msgid ""
"Return offset of local time from UTC, as a :class:`timedelta` object that is "
"positive east of UTC. If local time is west of UTC, this should be negative."
msgstr ""

msgid ""
"This represents the *total* offset from UTC; for example, if a :class:"
"`tzinfo` object represents both time zone and DST adjustments, :meth:"
"`utcoffset` should return their sum. If the UTC offset isn't known, return "
"``None``. Else the value returned must be a :class:`timedelta` object "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` (the "
"magnitude of the offset must be less than one day). Most implementations of :"
"meth:`utcoffset` will probably look like one of these two::"
msgstr ""

msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""

msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""

msgid ""
"Return the daylight saving time (DST) adjustment, as a :class:`timedelta` "
"object or ``None`` if DST information isn't known."
msgstr ""

msgid ""
"Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return "
"the offset as a :class:`timedelta` object (see :meth:`utcoffset` for "
"details). Note that DST offset, if applicable, has already been added to the "
"UTC offset returned by :meth:`utcoffset`, so there's no need to consult :"
"meth:`dst` unless you're interested in obtaining DST info separately. For "
"example, :meth:`datetime.timetuple` calls its :attr:`~.datetime.tzinfo` "
"attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag "
"should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for "
"DST changes when crossing time zones."
msgstr ""

msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""

msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr ""

msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location. The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it. If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""

msgid "or::"
msgstr "lub::"

msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular. For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies. Return ``None`` "
"if a string name isn't known. Note that this is a method rather than a fixed "
"string primarily because some :class:`tzinfo` subclasses will wish to return "
"different names depending on the specific value of *dt* passed, especially "
"if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""

msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names. A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument. A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""

msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response. For example, returning ``None`` is appropriate if the class wishes "
"to say that time objects don't participate in the :class:`tzinfo` protocols. "
"It may be more useful for ``utcoffset(None)`` to return the standard UTC "
"offset, as there is no other convention for discovering the standard offset."
msgstr ""

msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*. :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly. The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""

msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation. When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time. The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems. It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years. An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""

msgid ""
"In the following :download:`tzinfo_examples.py <../includes/tzinfo_examples."
"py>` file there are some examples of :class:`tzinfo` classes:"
msgstr ""

msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points. For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00. A wall time of the form 2:MM doesn't really make sense on that day, "
"so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the "
"day DST begins. For example, at the Spring forward transition of 2016, we "
"get::"
msgstr ""

msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time. In Eastern, that's times of the form 5:MM UTC on "
"the day daylight time ends. The local wall clock leaps from 1:59 (daylight "
"time) back to 1:00 (standard time) again. Local times of the form 1:MM are "
"ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping "
"two adjacent UTC hours into the same local hour then. In the Eastern "
"example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted "
"to Eastern, but earlier times have the :attr:`~datetime.fold` attribute set "
"to 0 and the later times have it set to 1. For example, at the Fall back "
"transition of 2016, we get::"
msgstr ""

msgid ""
"Note that the :class:`.datetime` instances that differ only by the value of "
"the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""

msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~datetime.fold` attribute or avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""

msgid ":mod:`zoneinfo`"
msgstr ""

msgid ""
"The :mod:`datetime` module has a basic :class:`timezone` class (for handling "
"arbitrary fixed offsets from UTC) and its :attr:`timezone.utc` attribute (a "
"UTC timezone instance)."
msgstr ""

msgid ""
"``zoneinfo`` brings the *IANA timezone database* (also known as the Olson "
"database) to Python, and its usage is recommended."
msgstr ""

msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr ""

msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""

msgid ":class:`timezone` Objects"
msgstr ""

msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC."
msgstr ""

msgid ""
"Objects of this class cannot be used to represent timezone information in "
"the locations where different offsets are used in different days of the year "
"or where historical changes have been made to civil time."
msgstr ""

msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC. It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, "
"otherwise :exc:`ValueError` is raised."
msgstr ""

msgid ""
"The *name* argument is optional. If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""

msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed."
msgstr ""

msgid ""
"The *dt* argument is ignored. The return value is a :class:`timedelta` "
"instance equal to the difference between the local time and UTC."
msgstr ""

msgid ""
"If *name* is not provided in the constructor, the name returned by "
"``tzname(dt)`` is generated from the value of the ``offset`` as follows. If "
"*offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it is a string "
"in the format ``UTC±HH:MM``, where ± is the sign of ``offset``, HH and MM "
"are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain ``'UTC'``, not "
"``'UTC+00:00'``."
msgstr ""

msgid "Always returns ``None``."
msgstr ""

msgid ""
"Return ``dt + offset``. The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string."
msgstr ""

msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string."
msgstr ""

msgid ""
"The table below provides a high-level comparison of :meth:`strftime` versus :"
"meth:`strptime`:"
msgstr ""

msgid "``strftime``"
msgstr ""

msgid "``strptime``"
msgstr ""

msgid "Usage"
msgstr ""

msgid "Convert object to a string according to a given format"
msgstr ""

msgid ""
"Parse a string into a :class:`.datetime` object given a corresponding format"
msgstr ""

msgid "Type of method"
msgstr ""

msgid "Instance method"
msgstr ""

msgid "Class method"
msgstr ""

msgid "Method of"
msgstr ""

msgid ":class:`date`; :class:`.datetime`; :class:`.time`"
msgstr ""

msgid ":class:`.datetime`"
msgstr ""

msgid "Signature"
msgstr ""

msgid "``strftime(format)``"
msgstr ""

msgid "``strptime(date_string, format)``"
msgstr ""

msgid ":meth:`strftime` and :meth:`strptime` Format Codes"
msgstr ""

msgid ""
"The following is a list of all the format codes that the 1989 C standard "
"requires, and these work on all platforms with a standard C implementation."
msgstr ""

msgid "Directive"
msgstr ""

msgid "Meaning"
msgstr "Znaczenie"

msgid "Example"
msgstr ""

msgid "Notes"
msgstr "Notatki"

msgid "``%a``"
msgstr ""

msgid "Weekday as locale's abbreviated name."
msgstr ""

msgid "Sun, Mon, ..., Sat (en_US);"
msgstr ""

msgid "So, Mo, ..., Sa (de_DE)"
msgstr ""

msgid "``%A``"
msgstr ""

msgid "Weekday as locale's full name."
msgstr ""

msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr ""

msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr ""

msgid "``%w``"
msgstr ""

msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""

msgid "0, 1, ..., 6"
msgstr ""

msgid "``%d``"
msgstr ""

msgid "Day of the month as a zero-padded decimal number."
msgstr ""

msgid "01, 02, ..., 31"
msgstr ""

msgid "\\(9)"
msgstr ""

msgid "``%b``"
msgstr ""

msgid "Month as locale's abbreviated name."
msgstr ""

msgid "Jan, Feb, ..., Dec (en_US);"
msgstr ""

msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr ""

msgid "``%B``"
msgstr ""

msgid "Month as locale's full name."
msgstr ""

msgid "January, February, ..., December (en_US);"
msgstr ""

msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr ""

msgid "``%m``"
msgstr ""

msgid "Month as a zero-padded decimal number."
msgstr ""

msgid "01, 02, ..., 12"
msgstr ""

msgid "``%y``"
msgstr ""

msgid "Year without century as a zero-padded decimal number."
msgstr ""

msgid "00, 01, ..., 99"
msgstr ""

msgid "``%Y``"
msgstr ""

msgid "Year with century as a decimal number."
msgstr ""

msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr ""

msgid "``%H``"
msgstr ""

msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr ""

msgid "00, 01, ..., 23"
msgstr ""

msgid "``%I``"
msgstr ""

msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr ""

msgid "``%p``"
msgstr ""

msgid "Locale's equivalent of either AM or PM."
msgstr ""

msgid "AM, PM (en_US);"
msgstr ""

msgid "am, pm (de_DE)"
msgstr ""

msgid "\\(1), \\(3)"
msgstr ""

msgid "``%M``"
msgstr ""

msgid "Minute as a zero-padded decimal number."
msgstr ""

msgid "00, 01, ..., 59"
msgstr ""

msgid "``%S``"
msgstr ""

msgid "Second as a zero-padded decimal number."
msgstr ""

msgid "\\(4), \\(9)"
msgstr ""

msgid "``%f``"
msgstr ""

msgid "Microsecond as a decimal number, zero-padded to 6 digits."
msgstr ""

msgid "000000, 000001, ..., 999999"
msgstr ""

msgid "\\(5)"
msgstr "\\(5)"

msgid "``%z``"
msgstr ""

msgid ""
"UTC offset in the form ``±HHMM[SS[.ffffff]]`` (empty string if the object is "
"naive)."
msgstr ""

msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr ""

msgid "\\(6)"
msgstr ""

msgid "``%Z``"
msgstr ""

msgid "Time zone name (empty string if the object is naive)."
msgstr ""

msgid "(empty), UTC, GMT"
msgstr ""

msgid "``%j``"
msgstr ""

msgid "Day of the year as a zero-padded decimal number."
msgstr ""

msgid "001, 002, ..., 366"
msgstr ""

msgid "``%U``"
msgstr ""

msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

msgid "00, 01, ..., 53"
msgstr ""

msgid "\\(7), \\(9)"
msgstr ""

msgid "``%W``"
msgstr ""

msgid ""
"Week number of the year (Monday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""

msgid "``%c``"
msgstr ""

msgid "Locale's appropriate date and time representation."
msgstr ""

msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr ""

msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr ""

msgid "``%x``"
msgstr ""

msgid "Locale's appropriate date representation."
msgstr ""

msgid "08/16/88 (None);"
msgstr ""

msgid "08/16/1988 (en_US);"
msgstr ""

msgid "16.08.1988 (de_DE)"
msgstr ""

msgid "``%X``"
msgstr ""

msgid "Locale's appropriate time representation."
msgstr ""

msgid "21:30:00 (en_US);"
msgstr ""

msgid "21:30:00 (de_DE)"
msgstr ""

msgid "``%%``"
msgstr ""

msgid "A literal ``'%'`` character."
msgstr ""

msgid "%"
msgstr ""

msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values."
msgstr ""

msgid "``%G``"
msgstr ""

msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr ""

msgid "\\(8)"
msgstr ""

msgid "``%u``"
msgstr ""

msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr ""

msgid "1, 2, ..., 7"
msgstr ""

msgid "``%V``"
msgstr ""

msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr ""

msgid "01, 02, ..., 53"
msgstr ""

msgid "\\(8), \\(9)"
msgstr ""

msgid ""
"These may not be available on all platforms when used with the :meth:"
"`strftime` method. The ISO 8601 year and ISO 8601 week directives are not "
"interchangeable with the year and week number directives above. Calling :"
"meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise "
"a :exc:`ValueError`."
msgstr ""

msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common. To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` "
"documentation. There are also differences between platforms in handling of "
"unsupported format specifiers."
msgstr ""

msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr ""

msgid "Technical Detail"
msgstr ""

msgid ""
"Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's "
"``time.strftime(fmt, d.timetuple())`` although not all objects support a :"
"meth:`timetuple` method."
msgstr ""

msgid ""
"For the :meth:`datetime.strptime` class method, the default value is "
"``1900-01-01T00:00:00.000``: any components not specified in the format "
"string will be pulled from the default value. [#]_"
msgstr ""

msgid "Using ``datetime.strptime(date_string, format)`` is equivalent to::"
msgstr ""

msgid ""
"except when the format includes sub-second components or timezone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""

msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as :class:`time` objects have no such values. If they're used "
"anyway, ``1900`` is substituted for the year, and ``1`` for the month and "
"day."
msgstr ""

msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values. If they're used anyway, ``0`` is substituted for them."
msgstr ""

msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise :exc:"
"`UnicodeError` or return an empty string instead."
msgstr ""

msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""

msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but "
"years < 1000 must be zero-filled to 4-digit width."
msgstr ""

msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr ""

msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""

msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""

msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right. ``%f`` is an extension to "
"the set of format characters in the C standard (but implemented separately "
"in datetime objects, and therefore always available)."
msgstr ""

msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""

msgid "For an aware object:"
msgstr ""

msgid ""
":meth:`utcoffset` is transformed into a string of the form ``±HHMM[SS[."
"ffffff]]``, where ``HH`` is a 2-digit string giving the number of UTC offset "
"hours, ``MM`` is a 2-digit string giving the number of UTC offset minutes, "
"``SS`` is a 2-digit string giving the number of UTC offset seconds and "
"``ffffff`` is a 6-digit string giving the number of UTC offset microseconds. "
"The ``ffffff`` part is omitted when the offset is a whole number of seconds "
"and both the ``ffffff`` and the ``SS`` part is omitted when the offset is a "
"whole number of minutes. For example, if :meth:`utcoffset` returns "
"``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string "
"``'-0330'``."
msgstr ""

msgid ""
"When the ``%z`` directive is provided to the  :meth:`strptime` method, the "
"UTC offsets can have a colon as a separator between hours, minutes and "
"seconds. For example, ``'+01:00:00'`` will be parsed as an offset of one "
"hour. In addition, providing ``'Z'`` is identical to ``'+00:00'``."
msgstr ""

msgid ""
"In :meth:`strftime`, ``%Z`` is replaced by an empty string if :meth:`tzname` "
"returns ``None``; otherwise ``%Z`` is replaced by the returned value, which "
"must be a string."
msgstr ""

msgid ":meth:`strptime` only accepts certain values for ``%Z``:"
msgstr ""

msgid "any value in ``time.tzname`` for your machine's locale"
msgstr ""

msgid "the hard-coded values ``UTC`` and ``GMT``"
msgstr ""

msgid ""
"So someone living in Japan may have ``JST``, ``UTC``, and ``GMT`` as valid "
"values, but probably not ``EST``. It will raise ``ValueError`` for invalid "
"values."
msgstr ""

msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced. The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""

msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the calendar year (``%Y``) are "
"specified."
msgstr ""

msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a :meth:"
"`strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""

msgid ""
"When used with the :meth:`strptime` method, the leading zero is optional "
"for  formats ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, ``%S``, ``%j``, ``%U``, "
"``%W``, and ``%V``. Format ``%y`` does require a leading zero."
msgstr ""

msgid "Footnotes"
msgstr "Przypisy"

msgid "If, that is, we ignore the effects of Relativity"
msgstr ""

msgid ""
"This matches the definition of the \"proleptic Gregorian\" calendar in "
"Dershowitz and Reingold's book *Calendrical Calculations*, where it's the "
"base calendar for all computations. See the book for algorithms for "
"converting between proleptic Gregorian ordinals and many other calendar "
"systems."
msgstr ""

msgid ""
"See R. H. van Gent's `guide to the mathematics of the ISO 8601 calendar "
"<https://web.archive.org/web/20220531051136/https://webspace.science.uu.nl/"
"~gent0113/calendar/isocalendar.htm>`_ for a good explanation."
msgstr ""

msgid ""
"Passing ``datetime.strptime('Feb 29', '%b %d')`` will fail since ``1900`` is "
"not a leap year."
msgstr ""
