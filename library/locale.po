# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`locale` --- Internationalization services"
msgstr ""

msgid "**Source code:** :source:`Lib/locale.py`"
msgstr ""

msgid ""
"The :mod:`locale` module opens access to the POSIX locale database and "
"functionality. The POSIX locale mechanism allows programmers to deal with "
"certain cultural issues in an application, without requiring the programmer "
"to know all the specifics of each country where the software is executed."
msgstr ""

msgid ""
"The :mod:`locale` module is implemented on top of the :mod:`_locale` module, "
"which in turn uses an ANSI C locale implementation if available."
msgstr ""

msgid "The :mod:`locale` module defines the following exception and functions:"
msgstr ""

msgid ""
"Exception raised when the locale passed to :func:`setlocale` is not "
"recognized."
msgstr ""

msgid ""
"If *locale* is given and not ``None``, :func:`setlocale` modifies the locale "
"setting for the *category*. The available categories are listed in the data "
"description below. *locale* may be a string, or an iterable of two strings "
"(language code and encoding). If it's an iterable, it's converted to a "
"locale name using the locale aliasing engine. An empty string specifies the "
"user's default settings. If the modification of the locale fails, the "
"exception :exc:`Error` is raised. If successful, the new locale setting is "
"returned."
msgstr ""

msgid ""
"If *locale* is omitted or ``None``, the current setting for *category* is "
"returned."
msgstr ""

msgid ""
":func:`setlocale` is not thread-safe on most systems. Applications typically "
"start with a call of ::"
msgstr ""

msgid ""
"This sets the locale for all categories to the user's default setting "
"(typically specified in the :envvar:`LANG` environment variable).  If the "
"locale is not changed thereafter, using multithreading should not cause "
"problems."
msgstr ""

msgid ""
"Returns the database of the local conventions as a dictionary. This "
"dictionary has the following strings as keys:"
msgstr ""

msgid "Category"
msgstr ""

msgid "Key"
msgstr ""

msgid "Meaning"
msgstr "Znaczenie"

msgid ":const:`LC_NUMERIC`"
msgstr ""

msgid "``'decimal_point'``"
msgstr ""

msgid "Decimal point character."
msgstr ""

msgid "``'grouping'``"
msgstr ""

msgid ""
"Sequence of numbers specifying which relative positions the "
"``'thousands_sep'`` is expected.  If the sequence is terminated with :const:"
"`CHAR_MAX`, no further grouping is performed. If the sequence terminates "
"with a ``0``,  the last group size is repeatedly used."
msgstr ""

msgid "``'thousands_sep'``"
msgstr ""

msgid "Character used between groups."
msgstr ""

msgid ":const:`LC_MONETARY`"
msgstr ""

msgid "``'int_curr_symbol'``"
msgstr ""

msgid "International currency symbol."
msgstr ""

msgid "``'currency_symbol'``"
msgstr ""

msgid "Local currency symbol."
msgstr ""

msgid "``'p_cs_precedes/n_cs_precedes'``"
msgstr ""

msgid ""
"Whether the currency symbol precedes the value (for positive resp. negative "
"values)."
msgstr ""

msgid "``'p_sep_by_space/n_sep_by_space'``"
msgstr ""

msgid ""
"Whether the currency symbol is separated from the value  by a space (for "
"positive resp. negative values)."
msgstr ""

msgid "``'mon_decimal_point'``"
msgstr ""

msgid "Decimal point used for monetary values."
msgstr ""

msgid "``'frac_digits'``"
msgstr ""

msgid ""
"Number of fractional digits used in local formatting of monetary values."
msgstr ""

msgid "``'int_frac_digits'``"
msgstr ""

msgid ""
"Number of fractional digits used in international formatting of monetary "
"values."
msgstr ""

msgid "``'mon_thousands_sep'``"
msgstr ""

msgid "Group separator used for monetary values."
msgstr ""

msgid "``'mon_grouping'``"
msgstr ""

msgid "Equivalent to ``'grouping'``, used for monetary values."
msgstr ""

msgid "``'positive_sign'``"
msgstr ""

msgid "Symbol used to annotate a positive monetary value."
msgstr ""

msgid "``'negative_sign'``"
msgstr ""

msgid "Symbol used to annotate a negative monetary value."
msgstr ""

msgid "``'p_sign_posn/n_sign_posn'``"
msgstr ""

msgid ""
"The position of the sign (for positive resp. negative values), see below."
msgstr ""

msgid ""
"All numeric values can be set to :const:`CHAR_MAX` to indicate that there is "
"no value specified in this locale."
msgstr ""

msgid ""
"The possible values for ``'p_sign_posn'`` and ``'n_sign_posn'`` are given "
"below."
msgstr ""

msgid "Value"
msgstr "Wartość"

msgid "Explanation"
msgstr "Wytłumaczenie"

msgid "``0``"
msgstr ""

msgid "Currency and value are surrounded by parentheses."
msgstr ""

msgid "``1``"
msgstr ""

msgid "The sign should precede the value and currency symbol."
msgstr ""

msgid "``2``"
msgstr ""

msgid "The sign should follow the value and currency symbol."
msgstr ""

msgid "``3``"
msgstr ""

msgid "The sign should immediately precede the value."
msgstr ""

msgid "``4``"
msgstr ""

msgid "The sign should immediately follow the value."
msgstr ""

msgid "``CHAR_MAX``"
msgstr ""

msgid "Nothing is specified in this locale."
msgstr ""

msgid ""
"The function temporarily sets the ``LC_CTYPE`` locale to the ``LC_NUMERIC`` "
"locale or the ``LC_MONETARY`` locale if locales are different and numeric or "
"monetary strings are non-ASCII. This temporary change affects other threads."
msgstr ""

msgid ""
"The function now temporarily sets the ``LC_CTYPE`` locale to the "
"``LC_NUMERIC`` locale in some cases."
msgstr ""

msgid ""
"Return some locale-specific information as a string.  This function is not "
"available on all systems, and the set of possible options might also vary "
"across platforms.  The possible argument values are numbers, for which "
"symbolic constants are available in the locale module."
msgstr ""

msgid ""
"The :func:`nl_langinfo` function accepts one of the following keys.  Most "
"descriptions are taken from the corresponding description in the GNU C "
"library."
msgstr ""

msgid ""
"Get a string with the name of the character encoding used in the selected "
"locale."
msgstr ""

msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent date and time in a locale-specific way."
msgstr ""

msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent a date in a locale-specific way."
msgstr ""

msgid ""
"Get a string that can be used as a format string for :func:`time.strftime` "
"to represent a time in a locale-specific way."
msgstr ""

msgid ""
"Get a format string for :func:`time.strftime` to represent time in the am/pm "
"format."
msgstr ""

msgid "Get the name of the n-th day of the week."
msgstr ""

msgid ""
"This follows the US convention of :const:`DAY_1` being Sunday, not the "
"international convention (ISO 8601) that Monday is the first day of the week."
msgstr ""

msgid "Get the abbreviated name of the n-th day of the week."
msgstr ""

msgid "Get the name of the n-th month."
msgstr ""

msgid "Get the abbreviated name of the n-th month."
msgstr ""

msgid "Get the radix character (decimal dot, decimal comma, etc.)."
msgstr ""

msgid "Get the separator character for thousands (groups of three digits)."
msgstr ""

msgid ""
"Get a regular expression that can be used with the regex function to "
"recognize a positive response to a yes/no question."
msgstr ""

msgid ""
"Get a regular expression that can be used with the regex(3) function to "
"recognize a negative response to a yes/no question."
msgstr ""

msgid ""
"The regular expressions for :const:`YESEXPR` and :const:`NOEXPR` use syntax "
"suitable for the :c:func:`regex` function from the C library, which might "
"differ from the syntax used in :mod:`re`."
msgstr ""

msgid ""
"Get the currency symbol, preceded by \"-\" if the symbol should appear "
"before the value, \"+\" if the symbol should appear after the value, or \"."
"\" if the symbol should replace the radix character."
msgstr ""

msgid "Get a string that represents the era used in the current locale."
msgstr ""

msgid ""
"Most locales do not define this value.  An example of a locale which does "
"define this value is the Japanese one.  In Japan, the traditional "
"representation of dates includes the name of the era corresponding to the "
"then-emperor's reign."
msgstr ""

msgid ""
"Normally it should not be necessary to use this value directly. Specifying "
"the ``E`` modifier in their format strings causes the :func:`time.strftime` "
"function to use this information.  The format of the returned string is not "
"specified, and therefore you should not assume knowledge of it on different "
"systems."
msgstr ""

msgid ""
"Get a format string for :func:`time.strftime` to represent date and time in "
"a locale-specific era-based way."
msgstr ""

msgid ""
"Get a format string for :func:`time.strftime` to represent a date in a "
"locale-specific era-based way."
msgstr ""

msgid ""
"Get a format string for :func:`time.strftime` to represent a time in a "
"locale-specific era-based way."
msgstr ""

msgid ""
"Get a representation of up to 100 values used to represent the values 0 to "
"99."
msgstr ""

msgid ""
"Tries to determine the default locale settings and returns them as a tuple "
"of the form ``(language code, encoding)``."
msgstr ""

msgid ""
"According to POSIX, a program which has not called ``setlocale(LC_ALL, '')`` "
"runs using the portable ``'C'`` locale.  Calling ``setlocale(LC_ALL, '')`` "
"lets it use the default locale as defined by the :envvar:`LANG` variable.  "
"Since we do not want to interfere with the current locale setting we thus "
"emulate the behavior in the way described above."
msgstr ""

msgid ""
"To maintain compatibility with other platforms, not only the :envvar:`LANG` "
"variable is tested, but a list of variables given as envvars parameter.  The "
"first found to be defined will be used.  *envvars* defaults to the search "
"path used in GNU gettext; it must always contain the variable name "
"``'LANG'``.  The GNU gettext search path contains ``'LC_ALL'``, "
"``'LC_CTYPE'``, ``'LANG'`` and ``'LANGUAGE'``, in that order."
msgstr ""

msgid ""
"Except for the code ``'C'``, the language code corresponds to :rfc:`1766`. "
"*language code* and *encoding* may be ``None`` if their values cannot be "
"determined."
msgstr ""

msgid ""
"Returns the current setting for the given locale category as sequence "
"containing *language code*, *encoding*. *category* may be one of the :const:"
"`LC_\\*` values except :const:`LC_ALL`.  It defaults to :const:`LC_CTYPE`."
msgstr ""

msgid ""
"Return the :term:`locale encoding` used for text data, according to user "
"preferences.  User preferences are expressed differently on different "
"systems, and might not be available programmatically on some systems, so "
"this function only returns a guess."
msgstr ""

msgid ""
"On some systems, it is necessary to invoke :func:`setlocale` to obtain the "
"user preferences, so this function is not thread-safe. If invoking setlocale "
"is not necessary or desired, *do_setlocale* should be set to ``False``."
msgstr ""

msgid ""
"On Android or if the :ref:`Python UTF-8 Mode <utf8-mode>` is enabled, always "
"return ``'utf-8'``, the :term:`locale encoding` and the *do_setlocale* "
"argument are ignored."
msgstr ""

msgid ""
"The :ref:`Python preinitialization <c-preinit>` configures the LC_CTYPE "
"locale. See also the :term:`filesystem encoding and error handler`."
msgstr ""

msgid ""
"The function now always returns ``\"utf-8\"`` on Android or if the :ref:"
"`Python UTF-8 Mode <utf8-mode>` is enabled."
msgstr ""

msgid "Get the current :term:`locale encoding`:"
msgstr ""

msgid "On Android and VxWorks, return ``\"utf-8\"``."
msgstr ""

msgid ""
"On Unix, return the encoding of the current :data:`LC_CTYPE` locale. Return "
"``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string: for "
"example, if the current LC_CTYPE locale is not supported."
msgstr ""

msgid "On Windows, return the ANSI code page."
msgstr ""

msgid ""
"This function is similar to :func:`getpreferredencoding(False) "
"<getpreferredencoding>` except this function ignores the :ref:`Python UTF-8 "
"Mode <utf8-mode>`."
msgstr ""

msgid ""
"Returns a normalized locale code for the given locale name.  The returned "
"locale code is formatted for use with :func:`setlocale`.  If normalization "
"fails, the original name is returned unchanged."
msgstr ""

msgid ""
"If the given encoding is not known, the function defaults to the default "
"encoding for the locale code just like :func:`setlocale`."
msgstr ""

msgid "Sets the locale for *category* to the default setting."
msgstr ""

msgid ""
"The default setting is determined by calling :func:`getdefaultlocale`. "
"*category* defaults to :const:`LC_ALL`."
msgstr ""

msgid ""
"Compares two strings according to the current :const:`LC_COLLATE` setting. "
"As any other compare function, returns a negative, or a positive value, or "
"``0``, depending on whether *string1* collates before or after *string2* or "
"is equal to it."
msgstr ""

msgid ""
"Transforms a string to one that can be used in locale-aware comparisons.  "
"For example, ``strxfrm(s1) < strxfrm(s2)`` is equivalent to ``strcoll(s1, "
"s2) < 0``.  This function can be used when the same string is compared "
"repeatedly, e.g. when collating a sequence of strings."
msgstr ""

msgid ""
"Formats a number *val* according to the current :const:`LC_NUMERIC` setting. "
"The format follows the conventions of the ``%`` operator.  For floating "
"point values, the decimal point is modified if appropriate.  If *grouping* "
"is ``True``, also takes the grouping into account."
msgstr ""

msgid ""
"If *monetary* is true, the conversion uses monetary thousands separator and "
"grouping strings."
msgstr ""

msgid ""
"Processes formatting specifiers as in ``format % val``, but takes the "
"current locale settings into account."
msgstr ""

msgid "The *monetary* keyword parameter was added."
msgstr ""

msgid ""
"Please note that this function works like :meth:`format_string` but will "
"only work for exactly one ``%char`` specifier.  For example, ``'%f'`` and "
"``'%.0f'`` are both valid specifiers, but ``'%f KiB'`` is not."
msgstr ""

msgid "For whole format strings, use :func:`format_string`."
msgstr ""

msgid "Use :meth:`format_string` instead."
msgstr ""

msgid ""
"Formats a number *val* according to the current :const:`LC_MONETARY` "
"settings."
msgstr ""

msgid ""
"The returned string includes the currency symbol if *symbol* is true, which "
"is the default. If *grouping* is ``True`` (which is not the default), "
"grouping is done with the value. If *international* is ``True`` (which is "
"not the default), the international currency symbol is used."
msgstr ""

msgid ""
"This function will not work with the 'C' locale, so you have to set a locale "
"via :func:`setlocale` first."
msgstr ""

msgid ""
"Formats a floating point number using the same format as the built-in "
"function ``str(float)``, but takes the decimal point into account."
msgstr ""

msgid ""
"Converts a string into a normalized number string, following the :const:"
"`LC_NUMERIC` settings."
msgstr ""

msgid ""
"Converts a normalized number string into a formatted string following the :"
"const:`LC_NUMERIC` settings."
msgstr ""

msgid ""
"Converts a string to a number, following the :const:`LC_NUMERIC` settings, "
"by calling *func* on the result of calling :func:`delocalize` on *string*."
msgstr ""

msgid ""
"Converts a string to an integer, following the :const:`LC_NUMERIC` "
"conventions."
msgstr ""

msgid ""
"Locale category for the character type functions.  Depending on the settings "
"of this category, the functions of module :mod:`string` dealing with case "
"change their behaviour."
msgstr ""

msgid ""
"Locale category for sorting strings.  The functions :func:`strcoll` and :"
"func:`strxfrm` of the :mod:`locale` module are affected."
msgstr ""

msgid ""
"Locale category for the formatting of time.  The function :func:`time."
"strftime` follows these conventions."
msgstr ""

msgid ""
"Locale category for formatting of monetary values.  The available options "
"are available from the :func:`localeconv` function."
msgstr ""

msgid ""
"Locale category for message display. Python currently does not support "
"application specific locale-aware messages.  Messages displayed by the "
"operating system, like those returned by :func:`os.strerror` might be "
"affected by this category."
msgstr ""

msgid ""
"This value may not be available on operating systems not conforming to the "
"POSIX standard, most notably Windows."
msgstr ""

msgid ""
"Locale category for formatting numbers.  The functions :func:`.format`, :"
"func:`atoi`, :func:`atof` and :func:`.str` of the :mod:`locale` module are "
"affected by that category.  All other numeric formatting operations are not "
"affected."
msgstr ""

msgid ""
"Combination of all locale settings.  If this flag is used when the locale is "
"changed, setting the locale for all categories is attempted. If that fails "
"for any category, no category is changed at all.  When the locale is "
"retrieved using this flag, a string indicating the setting for all "
"categories is returned. This string can be later used to restore the "
"settings."
msgstr ""

msgid ""
"This is a symbolic constant used for different values returned by :func:"
"`localeconv`."
msgstr ""

msgid "Example::"
msgstr ""

msgid "Background, details, hints, tips and caveats"
msgstr ""

msgid ""
"The C standard defines the locale as a program-wide property that may be "
"relatively expensive to change.  On top of that, some implementations are "
"broken in such a way that frequent locale changes may cause core dumps.  "
"This makes the locale somewhat painful to use correctly."
msgstr ""

msgid ""
"Initially, when a program is started, the locale is the ``C`` locale, no "
"matter what the user's preferred locale is.  There is one exception: the :"
"data:`LC_CTYPE` category is changed at startup to set the current locale "
"encoding to the user's preferred locale encoding. The program must "
"explicitly say that it wants the user's preferred locale settings for other "
"categories by calling ``setlocale(LC_ALL, '')``."
msgstr ""

msgid ""
"It is generally a bad idea to call :func:`setlocale` in some library "
"routine, since as a side effect it affects the entire program.  Saving and "
"restoring it is almost as bad: it is expensive and affects other threads "
"that happen to run before the settings have been restored."
msgstr ""

msgid ""
"If, when coding a module for general use, you need a locale independent "
"version of an operation that is affected by the locale (such as certain "
"formats used with :func:`time.strftime`), you will have to find a way to do "
"it without using the standard library routine.  Even better is convincing "
"yourself that using locale settings is okay.  Only as a last resort should "
"you document that your module is not compatible with non-\\ ``C`` locale "
"settings."
msgstr ""

msgid ""
"The only way to perform numeric operations according to the locale is to use "
"the special functions defined by this module: :func:`atof`, :func:`atoi`, :"
"func:`.format`, :func:`.str`."
msgstr ""

msgid ""
"There is no way to perform case conversions and character classifications "
"according to the locale.  For (Unicode) text strings these are done "
"according to the character value only, while for byte strings, the "
"conversions and classifications are done according to the ASCII value of the "
"byte, and bytes whose high bit is set (i.e., non-ASCII bytes) are never "
"converted or considered part of a character class such as letter or "
"whitespace."
msgstr ""

msgid "For extension writers and programs that embed Python"
msgstr ""

msgid ""
"Extension modules should never call :func:`setlocale`, except to find out "
"what the current locale is.  But since the return value can only be used "
"portably to restore it, that is not very useful (except perhaps to find out "
"whether or not the locale is ``C``)."
msgstr ""

msgid ""
"When Python code uses the :mod:`locale` module to change the locale, this "
"also affects the embedding application.  If the embedding application "
"doesn't want this to happen, it should remove the :mod:`_locale` extension "
"module (which does all the work) from the table of built-in modules in the :"
"file:`config.c` file, and make sure that the :mod:`_locale` module is not "
"accessible as a shared library."
msgstr ""

msgid "Access to message catalogs"
msgstr ""

msgid ""
"The locale module exposes the C library's gettext interface on systems that "
"provide this interface.  It consists of the functions :func:`!gettext`, :"
"func:`!dgettext`, :func:`!dcgettext`, :func:`!textdomain`, :func:`!"
"bindtextdomain`, and :func:`!bind_textdomain_codeset`.  These are similar to "
"the same functions in the :mod:`gettext` module, but use the C library's "
"binary format for message catalogs, and the C library's search algorithms "
"for locating message catalogs."
msgstr ""

msgid ""
"Python applications should normally find no need to invoke these functions, "
"and should use :mod:`gettext` instead.  A known exception to this rule are "
"applications that link with additional C libraries which internally invoke :"
"c:func:`gettext` or :c:func:`dcgettext`.  For these applications, it may be "
"necessary to bind the text domain, so that the libraries can properly locate "
"their message catalogs."
msgstr ""
