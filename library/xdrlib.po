# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Igor Zubrycki <igorzubrycki@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: Igor Zubrycki <igorzubrycki@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`xdrlib` --- Encode and decode XDR data"
msgstr ""

msgid "**Source code:** :source:`Lib/xdrlib.py`"
msgstr ""

msgid ""
"The :mod:`xdrlib` module is deprecated (see :pep:`PEP 594 <594#xdrlib>` for "
"details)."
msgstr ""

msgid ""
"The :mod:`xdrlib` module supports the External Data Representation Standard "
"as described in :rfc:`1014`, written by Sun Microsystems, Inc. June 1987.  "
"It supports most of the data types described in the RFC."
msgstr ""

msgid ""
"The :mod:`xdrlib` module defines two classes, one for packing variables into "
"XDR representation, and another for unpacking from XDR representation.  "
"There are also two exception classes."
msgstr ""

msgid ""
":class:`Packer` is the class for packing data into XDR representation. The :"
"class:`Packer` class is instantiated with no arguments."
msgstr ""

msgid ""
"``Unpacker`` is the complementary class which unpacks XDR data values from a "
"string buffer.  The input buffer is given as *data*."
msgstr ""

msgid ":rfc:`1014` - XDR: External Data Representation Standard"
msgstr ""

msgid ""
"This RFC defined the encoding of data which was XDR at the time this module "
"was originally written.  It has apparently been obsoleted by :rfc:`1832`."
msgstr ""

msgid ":rfc:`1832` - XDR: External Data Representation Standard"
msgstr ""

msgid "Newer RFC that provides a revised definition of XDR."
msgstr ""

msgid "Packer Objects"
msgstr ""

msgid ":class:`Packer` instances have the following methods:"
msgstr ""

msgid "Returns the current pack buffer as a string."
msgstr ""

msgid "Resets the pack buffer to the empty string."
msgstr ""

msgid ""
"In general, you can pack any of the most common XDR data types by calling "
"the appropriate ``pack_type()`` method.  Each method takes a single "
"argument, the value to pack.  The following simple data type packing methods "
"are supported: :meth:`pack_uint`, :meth:`pack_int`, :meth:`pack_enum`, :meth:"
"`pack_bool`, :meth:`pack_uhyper`, and :meth:`pack_hyper`."
msgstr ""

msgid "Packs the single-precision floating point number *value*."
msgstr ""

msgid "Packs the double-precision floating point number *value*."
msgstr ""

msgid "The following methods support packing strings, bytes, and opaque data:"
msgstr ""

msgid ""
"Packs a fixed length string, *s*.  *n* is the length of the string but it is "
"*not* packed into the data buffer.  The string is padded with null bytes if "
"necessary to guaranteed 4 byte alignment."
msgstr ""

msgid ""
"Packs a fixed length opaque data stream, similarly to :meth:`pack_fstring`."
msgstr ""

msgid ""
"Packs a variable length string, *s*.  The length of the string is first "
"packed as an unsigned integer, then the string data is packed with :meth:"
"`pack_fstring`."
msgstr ""

msgid ""
"Packs a variable length opaque data string, similarly to :meth:`pack_string`."
msgstr ""

msgid "Packs a variable length byte stream, similarly to :meth:`pack_string`."
msgstr ""

msgid "The following methods support packing arrays and lists:"
msgstr ""

msgid ""
"Packs a *list* of homogeneous items.  This method is useful for lists with "
"an indeterminate size; i.e. the size is not available until the entire list "
"has been walked.  For each item in the list, an unsigned integer ``1`` is "
"packed first, followed by the data value from the list.  *pack_item* is the "
"function that is called to pack the individual item.  At the end of the "
"list, an unsigned integer ``0`` is packed."
msgstr ""

msgid ""
"For example, to pack a list of integers, the code might appear like this::"
msgstr ""

msgid ""
"Packs a fixed length list (*array*) of homogeneous items.  *n* is the length "
"of the list; it is *not* packed into the buffer, but a :exc:`ValueError` "
"exception is raised if ``len(array)`` is not equal to *n*.  As above, "
"*pack_item* is the function used to pack each element."
msgstr ""

msgid ""
"Packs a variable length *list* of homogeneous items.  First, the length of "
"the list is packed as an unsigned integer, then each element is packed as "
"in :meth:`pack_farray` above."
msgstr ""

msgid "Unpacker Objects"
msgstr ""

msgid "The :class:`Unpacker` class offers the following methods:"
msgstr ""

msgid "Resets the string buffer with the given *data*."
msgstr ""

msgid "Returns the current unpack position in the data buffer."
msgstr ""

msgid ""
"Sets the data buffer unpack position to *position*.  You should be careful "
"about using :meth:`get_position` and :meth:`set_position`."
msgstr ""

msgid "Returns the current unpack data buffer as a string."
msgstr ""

msgid ""
"Indicates unpack completion.  Raises an :exc:`Error` exception if all of the "
"data has not been unpacked."
msgstr ""

msgid ""
"In addition, every data type that can be packed with a :class:`Packer`, can "
"be unpacked with an :class:`Unpacker`.  Unpacking methods are of the form "
"``unpack_type()``, and take no arguments.  They return the unpacked object."
msgstr ""

msgid "Unpacks a single-precision floating point number."
msgstr ""

msgid ""
"Unpacks a double-precision floating point number, similarly to :meth:"
"`unpack_float`."
msgstr ""

msgid ""
"In addition, the following methods unpack strings, bytes, and opaque data:"
msgstr ""

msgid ""
"Unpacks and returns a fixed length string.  *n* is the number of characters "
"expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed."
msgstr ""

msgid ""
"Unpacks and returns a fixed length opaque data stream, similarly to :meth:"
"`unpack_fstring`."
msgstr ""

msgid ""
"Unpacks and returns a variable length string.  The length of the string is "
"first unpacked as an unsigned integer, then the string data is unpacked "
"with :meth:`unpack_fstring`."
msgstr ""

msgid ""
"Unpacks and returns a variable length opaque data string, similarly to :meth:"
"`unpack_string`."
msgstr ""

msgid ""
"Unpacks and returns a variable length byte stream, similarly to :meth:"
"`unpack_string`."
msgstr ""

msgid "The following methods support unpacking arrays and lists:"
msgstr ""

msgid ""
"Unpacks and returns a list of homogeneous items.  The list is unpacked one "
"element at a time by first unpacking an unsigned integer flag.  If the flag "
"is ``1``, then the item is unpacked and appended to the list.  A flag of "
"``0`` indicates the end of the list.  *unpack_item* is the function that is "
"called to unpack the items."
msgstr ""

msgid ""
"Unpacks and returns (as a list) a fixed length array of homogeneous items.  "
"*n* is number of list elements to expect in the buffer. As above, "
"*unpack_item* is the function used to unpack each element."
msgstr ""

msgid ""
"Unpacks and returns a variable length *list* of homogeneous items. First, "
"the length of the list is unpacked as an unsigned integer, then each element "
"is unpacked as in :meth:`unpack_farray` above."
msgstr ""

msgid "Exceptions"
msgstr "WyjÄ…tki"

msgid "Exceptions in this module are coded as class instances:"
msgstr ""

msgid ""
"The base exception class.  :exc:`Error` has a single public attribute :attr:"
"`msg` containing the description of the error."
msgstr ""

msgid ""
"Class derived from :exc:`Error`.  Contains no additional instance variables."
msgstr ""

msgid "Here is an example of how you would catch one of these exceptions::"
msgstr ""
