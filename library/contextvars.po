# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:57+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`contextvars` --- Context Variables"
msgstr ""

msgid ""
"This module provides APIs to manage, store, and access context-local state.  "
"The :class:`~contextvars.ContextVar` class is used to declare and work with "
"*Context Variables*.  The :func:`~contextvars.copy_context` function and "
"the :class:`~contextvars.Context` class should be used to manage the current "
"context in asynchronous frameworks."
msgstr ""

msgid ""
"Context managers that have state should use Context Variables instead of :"
"func:`threading.local()` to prevent their state from bleeding to other code "
"unexpectedly, when used in concurrent code."
msgstr ""

msgid "See also :pep:`567` for additional details."
msgstr ""

msgid "Context Variables"
msgstr ""

msgid "This class is used to declare a new Context Variable, e.g.::"
msgstr ""

msgid ""
"The required *name* parameter is used for introspection and debug purposes."
msgstr ""

msgid ""
"The optional keyword-only *default* parameter is returned by :meth:"
"`ContextVar.get` when no value for the variable is found in the current "
"context."
msgstr ""

msgid ""
"**Important:** Context Variables should be created at the top module level "
"and never in closures.  :class:`Context` objects hold strong references to "
"context variables which prevents context variables from being properly "
"garbage collected."
msgstr ""

msgid "The name of the variable.  This is a read-only property."
msgstr ""

msgid "Return a value for the context variable for the current context."
msgstr ""

msgid ""
"If there is no value for the variable in the current context, the method "
"will:"
msgstr ""

msgid ""
"return the value of the *default* argument of the method, if provided; or"
msgstr ""

msgid ""
"return the default value for the context variable, if it was created with "
"one; or"
msgstr ""

msgid "raise a :exc:`LookupError`."
msgstr ""

msgid ""
"Call to set a new value for the context variable in the current context."
msgstr ""

msgid ""
"The required *value* argument is the new value for the context variable."
msgstr ""

msgid ""
"Returns a :class:`~contextvars.Token` object that can be used to restore the "
"variable to its previous value via the :meth:`ContextVar.reset` method."
msgstr ""

msgid ""
"Reset the context variable to the value it had before the :meth:`ContextVar."
"set` that created the *token* was used."
msgstr ""

msgid "For example::"
msgstr "Dla przykÅ‚adu::"

msgid ""
"*Token* objects are returned by the :meth:`ContextVar.set` method. They can "
"be passed to the :meth:`ContextVar.reset` method to revert the value of the "
"variable to what it was before the corresponding *set*."
msgstr ""

msgid ""
"A read-only property.  Points to the :class:`ContextVar` object that created "
"the token."
msgstr ""

msgid ""
"A read-only property.  Set to the value the variable had before the :meth:"
"`ContextVar.set` method call that created the token. It points to :attr:"
"`Token.MISSING` if the variable was not set before the call."
msgstr ""

msgid "A marker object used by :attr:`Token.old_value`."
msgstr ""

msgid "Manual Context Management"
msgstr ""

msgid "Returns a copy of the current :class:`~contextvars.Context` object."
msgstr ""

msgid ""
"The following snippet gets a copy of the current context and prints all "
"variables and their values that are set in it::"
msgstr ""

msgid ""
"The function has an O(1) complexity, i.e. works equally fast for contexts "
"with a few context variables and for contexts that have a lot of them."
msgstr ""

msgid "A mapping of :class:`ContextVars <ContextVar>` to their values."
msgstr ""

msgid ""
"``Context()`` creates an empty context with no values in it. To get a copy "
"of the current context use the :func:`~contextvars.copy_context` function."
msgstr ""

msgid ""
"Every thread will have a different top-level :class:`~contextvars.Context` "
"object. This means that a :class:`ContextVar` object behaves in a similar "
"fashion to :func:`threading.local()` when values are assigned in different "
"threads."
msgstr ""

msgid "Context implements the :class:`collections.abc.Mapping` interface."
msgstr ""

msgid ""
"Execute ``callable(*args, **kwargs)`` code in the context object the *run* "
"method is called on.  Return the result of the execution or propagate an "
"exception if one occurred."
msgstr ""

msgid ""
"Any changes to any context variables that *callable* makes will be contained "
"in the context object::"
msgstr ""

msgid ""
"The method raises a :exc:`RuntimeError` when called on the same context "
"object from more than one OS thread, or when called recursively."
msgstr ""

msgid "Return a shallow copy of the context object."
msgstr ""

msgid ""
"Return ``True`` if the *context* has a value for *var* set; return ``False`` "
"otherwise."
msgstr ""

msgid ""
"Return the value of the *var* :class:`ContextVar` variable. If the variable "
"is not set in the context object, a :exc:`KeyError` is raised."
msgstr ""

msgid ""
"Return the value for *var* if *var* has the value in the context object.  "
"Return *default* otherwise.  If *default* is not given, return ``None``."
msgstr ""

msgid "Return an iterator over the variables stored in the context object."
msgstr ""

msgid "Return the number of variables set in the context object."
msgstr ""

msgid "Return a list of all variables in the context object."
msgstr ""

msgid "Return a list of all variables' values in the context object."
msgstr ""

msgid ""
"Return a list of 2-tuples containing all variables and their values in the "
"context object."
msgstr ""

msgid "asyncio support"
msgstr ""

msgid ""
"Context variables are natively supported in :mod:`asyncio` and are ready to "
"be used without any extra configuration.  For example, here is a simple echo "
"server, that uses a context variable to make the address of a remote client "
"available in the Task that handles that client::"
msgstr ""
