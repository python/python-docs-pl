# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:54+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`asynchat` --- Asynchronous socket command/response handler"
msgstr ":mod:`asynchat` --- Asynchroniczna obsługa gniazda komend/odpowiedzi."

msgid "**Source code:** :source:`Lib/asynchat.py`"
msgstr ""

msgid ""
"The :mod:`asynchat` module is deprecated (see :pep:`PEP 594 <594#asynchat>` "
"for details). Please use :mod:`asyncio` instead."
msgstr ""

msgid ""
"This module exists for backwards compatibility only.  For new code we "
"recommend using :mod:`asyncio`."
msgstr ""

msgid ""
"This module builds on the :mod:`asyncore` infrastructure, simplifying "
"asynchronous clients and servers and making it easier to handle protocols "
"whose elements are terminated by arbitrary strings, or are of variable "
"length. :mod:`asynchat` defines the abstract class :class:`async_chat` that "
"you subclass, providing implementations of the :meth:`collect_incoming_data` "
"and :meth:`found_terminator` methods. It uses the same asynchronous loop as :"
"mod:`asyncore`, and the two types of channel, :class:`asyncore.dispatcher` "
"and :class:`asynchat.async_chat`, can freely be mixed in the channel map. "
"Typically an :class:`asyncore.dispatcher` server channel generates new :"
"class:`asynchat.async_chat` channel objects as it receives incoming "
"connection requests."
msgstr ""
"Ten moduł buduje na infrastrukturze modułu :mod:`asyncore`, upraszczając "
"klientów i serwery asynchroniczne i czyniąc łatwiejszym obsługę protokołów "
"których elementy są zakańczane przez zadane ciągi znaków, lub są zmiennej "
"długości. Moduł :mod:`asynchat` określa abstrakcyjne uogólnienie :class:"
"`async_chat` które możesz dostosować tworząc własne podrzędne uogólnienie, "
"dostarczając wypełnień sposobów postępowania :meth:`collect_incoming_data` "
"i :meth:`found_terminator`. Używa tej samej asynchronicznej pętli co moduł :"
"mod:`asyncore`, i dwóch rodzajów kanałów,  - :class:`asyncore.dispatcher` i :"
"class:`asynchat.async_chat`, mogą być dowolnie być mieszane w mapie kanałów. "
"Typowo kanał serwera :class:`asyncore.dispatcher` generuje nowe obiekty "
"kanałów :class:`asynchat.async_chat` gdy otrzymuje wchodzące zapytania o "
"połączenie."

msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ""

msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

msgid ""
"This class is an abstract subclass of :class:`asyncore.dispatcher`. To make "
"practical use of the code you must subclass :class:`async_chat`, providing "
"meaningful :meth:`collect_incoming_data` and :meth:`found_terminator` "
"methods. The :class:`asyncore.dispatcher` methods can be used, although not "
"all make sense in a message/response context."
msgstr ""
"To uogólnienie jest abstrakcyjnym  uogólnieniem podrzędnym względem "
"uogólnienia :class:`asyncore.dispatcher`. Aby praktycznie użyć kodu musisz "
"dostosować podrzędne uogólnienie względem uogólnienia :class:`async_chat`, "
"dostarczając sensownego wypełnienia sposobu postępowania :meth:"
"`collect_incoming_data` i sposobu postępowania :meth:`found_terminator`. "
"Sposoby postępowania uogólnienia :class:`asyncore.dispatcher` mogą być "
"używane, chociaż nie wszystkie mają sens w kontekście wiadomość/odpowiedź."

msgid ""
"Like :class:`asyncore.dispatcher`, :class:`async_chat` defines a set of "
"events that are generated by an analysis of socket conditions after a :c:"
"func:`select` call. Once the polling loop has been started the :class:"
"`async_chat` object's methods are called by the event-processing framework "
"with no action on the part of the programmer."
msgstr ""

msgid ""
"Two class attributes can be modified, to improve performance, or possibly "
"even to conserve memory."
msgstr ""
"Dwie właściwości uogólnienia mogą być modyfikowane, aby poprawić wydajność, "
"lub nawet aby możliwie oszczędzać pamięć."

msgid "The asynchronous input buffer size (default ``4096``)."
msgstr ""
"Rozmiar przestrzeni wymiany wejściowej asynchronicznej (domyślnie ``4096``)."

msgid "The asynchronous output buffer size (default ``4096``)."
msgstr ""
"Rozmiar przestrzeni wymiany wyjściowej asynchronicznej (domyślnie ``4096``)."

msgid ""
"Unlike :class:`asyncore.dispatcher`, :class:`async_chat` allows you to "
"define a :abbr:`FIFO (first-in, first-out)` queue of *producers*. A producer "
"need have only one method, :meth:`more`, which should return data to be "
"transmitted on the channel. The producer indicates exhaustion (*i.e.* that "
"it contains no more data) by having its :meth:`more` method return the empty "
"bytes object. At this point the :class:`async_chat` object removes the "
"producer from the queue and starts using the next producer, if any. When the "
"producer queue is empty the :meth:`handle_write` method does nothing. You "
"use the channel object's :meth:`set_terminator` method to describe how to "
"recognize the end of, or an important breakpoint in, an incoming "
"transmission from the remote endpoint."
msgstr ""

msgid ""
"To build a functioning :class:`async_chat` subclass your  input methods :"
"meth:`collect_incoming_data` and :meth:`found_terminator` must handle the "
"data that the channel receives asynchronously. The methods are described "
"below."
msgstr ""
"Aby zbudować funkcjonujące podrzędne uogólnienia względem uogólnienia :class:"
"`async_chat`, twoje sposoby postępowania wprowadzania :meth:"
"`collect_incoming_data` i :meth:`found_terminator` muszą obsługiwać dane "
"które kanał otrzymuje asynchronicznie. Sposoby postępowania są opisane "
"poniżej."

msgid ""
"Pushes a ``None`` on to the producer queue. When this producer is popped off "
"the queue it causes the channel to be closed."
msgstr ""

msgid ""
"Called with *data* holding an arbitrary amount of received data.  The "
"default method, which must be overridden, raises a :exc:"
"`NotImplementedError` exception."
msgstr ""
"Wywoływany z *danymi* przechowując określoną ilość otrzymanych danych. "
"Domyślny sposób postępowania, który musi zostać przesłonięty, zgłasza "
"wyjątek :exc:`NotImplementedError`."

msgid ""
"In emergencies this method will discard any data held in the input and/or "
"output buffers and the producer queue."
msgstr ""

msgid ""
"Called when the incoming data stream  matches the termination condition set "
"by :meth:`set_terminator`. The default method, which must be overridden, "
"raises a :exc:`NotImplementedError` exception. The buffered input data "
"should be available via an instance attribute."
msgstr ""
"Wywoływana gdy przychodzący strumień danych odpowiada warunkowi zakończenia "
"ustawionemu przez sposób postępowania :meth:`set_terminator`. Domyślny "
"sposób postępowania, który musi być przesłonięty, zgłasza wyjątek :exc:"
"`NotImplementedError`. Dane wejściowe z przestrzeni wymiany powinny być "
"dostępne przez właściwość przykładu."

msgid "Returns the current terminator for the channel."
msgstr "Zwraca obecne zakończenie dla kanału."

msgid ""
"Pushes data on to the channel's queue to ensure its transmission. This is "
"all you need to do to have the channel write the data out to the network, "
"although it is possible to use your own producers in more complex schemes to "
"implement encryption and chunking, for example."
msgstr ""

msgid ""
"Takes a producer object and adds it to the producer queue associated with "
"the channel.  When all currently pushed producers have been exhausted the "
"channel will consume this producer's data by calling its :meth:`more` method "
"and send the data to the remote endpoint."
msgstr ""

msgid ""
"Sets the terminating condition to be recognized on the channel.  ``term`` "
"may be any of three types of value, corresponding to three different ways to "
"handle incoming protocol data."
msgstr ""
"Ustawia warunek zakończenia aby był rozpoznany przez kanał. ``term`` może "
"być dowolną z trzech typów wartości, odpowiadających trzem różnym sposobom "
"obsługi przychodzących danych protokołu."

msgid "term"
msgstr "term - z ang. - termin"

msgid "Description"
msgstr "Opis"

msgid "*string*"
msgstr "*ciąg znaków*"

msgid ""
"Will call :meth:`found_terminator` when the string is found in the input "
"stream"
msgstr ""
"Wywoła sposób postępowania :meth:`found_terminator` gdy ciąg znaków zostanie "
"znaleziony w strumieniu wejściowym"

msgid "*integer*"
msgstr "*integer* - z ang. - *liczba całkowita*"

msgid ""
"Will call :meth:`found_terminator` when the indicated number of characters "
"have been received"
msgstr ""
"Wywoła :meth:`found_terminator` gdy wskazana liczba znaków zostanie odebrana"

msgid "``None``"
msgstr "``None`` - z ang. - ``Żaden``"

msgid "The channel continues to collect data forever"
msgstr "Kanał nadal zbiera dane w pętli nieskończonej"

msgid ""
"Note that any data following the terminator will be available for reading by "
"the channel after :meth:`found_terminator` is called."
msgstr ""
"Zauważ że dowolne dane następujące po terminatorze będą dostępne dla "
"przeczytania przez kanał po tym jak sposób postępowania :meth:"
"`found_terminator` zostanie wywołany."

msgid "asynchat Example"
msgstr "Przykład asynchat"

msgid ""
"The following partial example shows how HTTP requests can be read with :"
"class:`async_chat`.  A web server might create an :class:"
"`http_request_handler` object for each incoming client connection. Notice "
"that initially the channel terminator is set to match the blank line at the "
"end of the HTTP headers, and a flag indicates that the headers are being "
"read."
msgstr ""
"Następujący częściowy przykład pokazuje jak zapytania HTTP mogą być wczytane "
"za pomocą :class:`async_chat`. Serwer sieci może tworzyć obiekt :class:"
"`http_request_handler` dla każdego przychodzącego połączenia klienckiego. "
"Zauważ że początkowo zakończenie kanału jest ustalone aby odpowiadało pustej "
"linii na końcu nagłówka HTTP, i flaga wskazująca że nagłówki są wczytywane."

msgid ""
"Once the headers have been read, if the request is of type POST (indicating "
"that further data are present in the input stream) then the ``Content-Length:"
"`` header is used to set a numeric terminator to read the right amount of "
"data from the channel."
msgstr ""
"Gdy już nagłówki zostaną wczytane, jeśli zapytanie jest typu POST (wskazując "
"na to że dalsze dane są obecne w strumieniu wejściowym) wtedy nagłówek "
"``Content-Length:`` jest używany aby ustawić numeryczny terminator do "
"wczytania właściwej ilości danych z kanału."

msgid ""
"The :meth:`handle_request` method is called once all relevant input has been "
"marshalled, after setting the channel terminator to ``None`` to ensure that "
"any extraneous data sent by the web client are ignored. ::"
msgstr ""
"Metoda :meth:`handle_request` jest wywoływane gdy już całe istotne wejście "
"zostało pobrane, po ustawieniu terminatora kanału na ``None`` - z ang. - "
"``Żaden`` aby upewnić się że jakiekolwiek nadmiarowe dane przesyłane przez "
"klienta sieci są ignorowane. ::"
