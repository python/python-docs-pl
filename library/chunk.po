# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Stefan Ocetkiewicz <stefan.ocetkiewicz@gmail.com>, 2021
# Maciej Olko <maciej.olko@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-24 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2021\n"
"Language-Team: Polish (https://www.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`chunk` --- Read IFF chunked data"
msgstr ":mod:`chunk` --- Wczytaj pokawałkowane dane IFF"

msgid "**Source code:** :source:`Lib/chunk.py`"
msgstr "**Kod źródłowy:** :source:`Lib/chunk.py`"

msgid ""
"The :mod:`chunk` module is deprecated (see :pep:`PEP 594 <594#chunk>` for "
"details)."
msgstr ""

msgid ""
"This module provides an interface for reading files that use EA IFF 85 "
"chunks. [#]_  This format is used in at least the Audio Interchange File "
"Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The WAVE audio "
"file format is closely related and can also be read using this module."
msgstr ""
"Ten moduł dostarcza sprzęg dla wczytania pliku który używa kawałków EA IFF "
"85. [#]_ Ten format jest używany co najmniej w AIFF - Formacie Pliku Wymiany "
"Dźwięku (AIFF/AIFF-C) i Formacie Pliku Real Media (RMFF). Format pliku "
"dźwiękowego WAVE jest blisko związany i może także być wczytany używając "
"tego modułu."

msgid "A chunk has the following structure:"
msgstr "Kawałek ma następującą strukturę:"

msgid "Offset"
msgstr "Offset"

msgid "Length"
msgstr "Długość"

msgid "Contents"
msgstr "Zawartość"

msgid "0"
msgstr "0"

msgid "4"
msgstr "4"

msgid "Chunk ID"
msgstr "ID kawałka"

msgid "Size of chunk in big-endian byte order, not including the header"
msgstr ""
"Rozmiar kawałka w porządku bajtów dużego-endian-u , nie zawierając nagłówka."

msgid "8"
msgstr "8"

msgid "*n*"
msgstr "*n*"

msgid "Data bytes, where *n* is the size given in the preceding field"
msgstr "Bajty danych, gdzie *n* jest rozmiarem danym w poprzednim polu"

msgid "8 + *n*"
msgstr "8 + *n*"

msgid "0 or 1"
msgstr "0 lub 1"

msgid "Pad byte needed if *n* is odd and chunk alignment is used"
msgstr ""
"Bajt wyrównania potrzebny jeśli *n* jest nieparzysty i wyrównanie kawałka "
"jest używane."

msgid "The ID is a 4-byte string which identifies the type of chunk."
msgstr ""
"Identyfikator ID jest 4-bajtowym ciągiem znaków który identyfikuje typ "
"kawałka."

msgid ""
"The size field (a 32-bit value, encoded using big-endian byte order) gives "
"the size of the chunk data, not including the 8-byte header."
msgstr ""
"Pole rozmiaru (32-bitowa wartość, zakodowana używając porządku bajtów dużego-"
"endian-a) daje rozmiar danych kawałka, nie zawierając 8-bajtowego nagłówka."

msgid ""
"Usually an IFF-type file consists of one or more chunks.  The proposed usage "
"of the :class:`Chunk` class defined here is to instantiate an instance at "
"the start of each chunk and read from the instance until it reaches the end, "
"after which a new instance can be instantiated. At the end of the file, "
"creating a new instance will fail with an :exc:`EOFError` exception."
msgstr ""
"Zwykle plik typu IFF składa się z jednego lub więcej fragmentów. Proponowane "
"użycie zdefiniowanej tutaj klasy :class:`Chunk` polega na tworzeniu "
"instancji na początku każdej porcji i odczytywaniu jej aż do końca, po czym "
"można utworzyć nową instancję. Na końcu pliku, tworzenie nowej instancji "
"zakończy się niepowodzeniem z wyjątkiem :exc:`EOFError`."

msgid ""
"Class which represents a chunk.  The *file* argument is expected to be a "
"file-like object.  An instance of this class is specifically allowed.  The "
"only method that is needed is :meth:`~io.IOBase.read`.  If the methods :meth:"
"`~io.IOBase.seek` and :meth:`~io.IOBase.tell` are present and don't raise an "
"exception, they are also used. If these methods are present and raise an "
"exception, they are expected to not have altered the object.  If the "
"optional argument *align* is true, chunks are assumed to be aligned on 2-"
"byte boundaries.  If *align* is false, no alignment is assumed.  The default "
"value is true.  If the optional argument *bigendian* is false, the chunk "
"size is assumed to be in little-endian order. This is needed for WAVE audio "
"files. The default value is true.  If the optional argument *inclheader* is "
"true, the size given in the chunk header includes the size of the header.  "
"The default value is false."
msgstr ""

msgid "A :class:`Chunk` object supports the following methods:"
msgstr ""
"przedmiot uogólnienia :class:`Chunk` wspiera następujące sposoby "
"postępowania:"

msgid ""
"Returns the name (ID) of the chunk.  This is the first 4 bytes of the chunk."
msgstr ""
"Zwraca nazwę (IDentyfikator) kawałka. To jest pierwsze 4 bajty kawałka."

msgid "Returns the size of the chunk."
msgstr "Zwraca rozmiar kawałka."

msgid ""
"Close and skip to the end of the chunk.  This does not close the underlying "
"file."
msgstr ""
"Zamknij i przeskocz na koniec kawałka. To nie zamyka leżącego u podstaw "
"pliku."

msgid ""
"The remaining methods will raise :exc:`OSError` if called after the :meth:"
"`close` method has been called.  Before Python 3.3, they used to raise :exc:"
"`IOError`, now an alias of :exc:`OSError`."
msgstr ""

msgid "Returns ``False``."
msgstr "Zwraca ``fałsz``."

msgid ""
"Set the chunk's current position.  The *whence* argument is optional and "
"defaults to ``0`` (absolute file positioning); other values are ``1`` (seek "
"relative to the current position) and ``2`` (seek relative to the file's "
"end).  There is no return value. If the underlying file does not allow seek, "
"only forward seeks are allowed."
msgstr ""
"Ustaw obecną pozycję kawałka. Parametr *whence* jest opcjonalny i domyślnie "
"równy ``0`` (bezwzględna pozycja w pliku); inne wartości są ``1`` (wyszukaj "
"w odniesieniu do obecnej pozycji w pliku) i ``2`` (wyszukaj w odniesieniu do "
"końca pliku). Nie ma wartości zwracanej. Jeśli leżący u podstaw plik nie "
"pozwala na wyszukiwanie, tylko wyszukiwanie w przód jest dozwolone."

msgid "Return the current position into the chunk."
msgstr "Zwróć obecną pozycję w kawałku."

msgid ""
"Read at most *size* bytes from the chunk (less if the read hits the end of "
"the chunk before obtaining *size* bytes).  If the *size* argument is "
"negative or omitted, read all data until the end of the chunk.  An empty "
"bytes object is returned when the end of the chunk is encountered "
"immediately."
msgstr ""

msgid ""
"Skip to the end of the chunk.  All further calls to :meth:`read` for the "
"chunk will return ``b''``.  If you are not interested in the contents of the "
"chunk, this method should be called so that the file points to the start of "
"the next chunk."
msgstr ""

msgid "Footnotes"
msgstr "Przypisy"

msgid ""
"\"EA IFF 85\" Standard for Interchange Format Files, Jerry Morrison, "
"Electronic Arts, January 1985."
msgstr ""
"\"EA IFF 85\" Standard dla formatu plików wzajemnej wymiany, Jerry Morrison, "
"Electronic Arts, styczeń 1985."
